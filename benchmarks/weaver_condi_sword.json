<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<link id="theme" rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/slate/bootstrap.min.css" crossorigin="anonymous">
<style type="text/css">
.table th {
    border-top: 0;
}

.theme-slate g.hovertext text.name {
    fill: #cccccc !important;
}

.theme-yeti g.hovertext text.name {
    fill: #495057 !important;
}

.theme-slate g.hovertext rect {
    fill: #272B30 !important;
    fill-opacity: 0.9 !important;
}

.theme-yeti g.hovertext rect {
    fill: #fff !important;
    fill-opacity: 0.9 !important;
}

.ei-header {
    min-width: 1000px;
    margin-right: auto;
    margin-left: auto;
}

.ei-header-big {
    min-width: 1900px;
    margin-right: auto;
    margin-left: auto;
}

.ei-container {
    max-width: 60%;
    min-width: 1000px;
    margin-right: auto;
    margin-left: auto;
}

.ei-container-big {
    min-width: 1900px;
    margin-right: auto;
    margin-left: auto;
}

.boon-container {
    position: relative;
    text-align: center;
    height: 20px;
}

.boon-number {
    position: absolute;
    pointer-events: none;
    font-size: 0.65em;
    left: 15%;
    top: 45%;
    text-shadow: -2px -2px 3px #000000, -2px 2px 3px #000000, 2px -2px 3px #000000, 0px 2px 3px #000000, 0px -2px 3px #000000, 2px 0px 3px #000000, -2px 0px 3px #000000, 2px 2px 3px #000000;
    font-weight: bold;
    color: #fff;
    width: 100%;
}

.player-data {
    border-top: 1px solid black;
    width: 250px;
    height: 160px;
}

.target-data {
    border-bottom: 1px solid black;
}

.player-status {
    background-color: green;
    color: #DDDDDD;
    width: 100px;
}

.target-status {
    color: #DDDDDD;
    width: 250px;
}

h6.actor-shorten {
    width: 100%;
    margin-top: 7px;
    margin-bottom: 7px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    vertical-align: middle;
}

.player-status.dead {
    background-color: black;
}

.player-status.down {
    background-color: red;
}

.player-status.dc {
    background-color: grey;
}

.squad-details {
    min-width: 550px;
    min-height: 850px;
}

.group-details {
    max-height: 800px;
}

.range-btn {
    width: 60px;
}

.range-btns {
    width: 200px;
    height: 30px;
}

.ply-btn {
    width: 120px;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    vertical-align: middle;
}

.cr-hp-display {
    font-size: 0.65rem;
    position: relative;
    top: -12px;
    width: 40px;
    left: 210px;
}

.theme-slate .player-data.active {
    background-color: rgba(80, 86, 92, 0.9);
}

.theme-yeti .player-data.active {
    background-color: rgba(220, 220, 220, 0.9);
}


body {
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
}

.replay {
    border: 2px solid #888888;
}

.btn {
    font-weight: 400;
    padding: 0.75rem 1rem;
}

.btn-small {
    font-size: 0.9em;
    padding: 0.375rem 0.5rem;
}

.btn-ssmall {
    font-size: 0.7em;
    padding: 0.25rem 0.4rem;
}

.target-cell, .player-cell, a {
    cursor: pointer !important;
}

h1,
h2,
h3,
h4,
h5,
h6,
.h1,
.h2,
.h3,
.h4,
.h5,
.h6 {
    margin-bottom: 0.5rem;
    font-family: inherit;
    font-weight: 500;
    line-height: 1.2;
    color: inherit;
}

.header {
    text-align: center;
    width: 100%;
    margin-top: 6px;
    margin-bottom: 10px;
}

[v-cloak] {
    display: none;
}

.footer {
    text-align: center;
    margin-top: 10px;
    margin-bottom: 6px;
    width: 100%;
}

td.sorting_1 {
    background-color: rgba(39, 128, 227, 0.05);
}

table {
    font-size: inherit;
}

.table > tfoot > tr:first-child > td,
.table > tfoot > tr:last-child > td {
    border-top-width: 3px;
}

.table > tfoot > tr > td {
    color: #888;
}

tr.condi td {
    background-color: rgba(255, 0, 0, 0.25);
}

img.icon {
    width: 18px;
    height: 18px;
}

img.icon-l {
    width: 24px;
    height: 24px;
}

.empty-icon-l {
    width: 24px;
    height: 24px;
}

.empty-icon-ll {
    width: 48px;
    height: 48px;
}

img.icon-ll {
    width: 48px;
    height: 48px;
}

img.icon-xl {
    width: 128px;
    height: 128px;
}

img.icon-xxl {
    width: 196px;
    height: 196px;
}


img.icon-lg {
    width: 64px;
    height: 64px;
}

table.composition td {
    max-width: 120px;
    width: 120px;
}

table.composition .shorten {
    overflow: hidden;
    text-overflow: ellipsis;
}

img.icon-hover:hover,
td:hover img.icon-hover,
th:hover img.icon-hover,
.table-hover tr:hover td img.icon-hover {
    width: 36px;
    height: 36px;
    margin: -9px;
    position: relative;
    -webkit-filter: drop-shadow(3px 3px 6px #000);
    filter: drop-shadow(3px 3px 6px #000);
    -ms-filter: "progid:DXImageTransform.Microsoft.Dropshadow(OffX=3, OffY=3, Color='#000')";
    filter: "progid:DXImageTransform.Microsoft.Dropshadow(OffX=3, OffY=3, Color='#000')";
}

table.dataTable.table-sm > thead > tr > th {
    padding-right: 10px;
}

table.dataTable.table-sm .sorting:before,
table.dataTable.table-sm .sorting_asc:before,
table.dataTable.table-sm .sorting_desc:before {
    right: 0.3em;
}

table.dataTable thead .sorting:before,
table.dataTable thead .sorting:after,
table.dataTable thead .sorting_asc:after,
table.dataTable thead .sorting_desc:before,
table.dataTable thead .sorting_asc_disabled:before,
table.dataTable thead .sorting_asc_disabled:after,
table.dataTable thead .sorting_desc_disabled:before,
table.dataTable thead .sorting_desc_disabled:after {
    right: 0.3em;
    display: none;
}

table.dataTable thead .sorting_asc:before,
table.dataTable thead .sorting_desc:after {
    right: 0.3em;
    display: block;
}

.sub-tabs {
    margin-top: 10px;
}

td,
th {
    text-align: center;
    white-space: nowrap;
}

.tooltip-inner {
    max-width: 400px;
}

.theme-slate .nav-tabs .nav-link.active {
    background-image: -webkit-gradient(linear, left top, left bottom, from(#484e55), color-stop(60%, #3A3F44), to(#313539));
    background-image: linear-gradient(#484e55, #3A3F44 60%, #313539);
    background-repeat: no-repeat;
    border-bottom-color: transparent;
}

.theme-slate .nav-tabs .nav-link,
.theme-slate .nav-tabs .nav-link:hover {
    color: #aaa;
}

    .theme-slate .nav-tabs .nav-link:hover {
        color: #fff;
    }

.theme-yeti .nav-pills .nav-link:not(.active) {
    background-color: #eee;
    border: 1px solid #e1e1e1;
}

.theme-yeti .nav-pills .nav-link:hover, .theme-yeti .nav-pills .nav-link:focus {
    background-color: #008cba;
    border-color: #0079a1;
}

.nav-tabs {
    margin-top: 0.5rem;
}

.rot-icon {
    width: 30px;
    height: 30px;
}

.rot-cancelled {
    border: 2px solid #ff0000;
}

.rot-animfull {
    border: 2px solid #00ff00;
}

.rot-unknown {
    border: 2px solid #ffff00;
}

.rot-small .rot-icon {
    width: 20px;
    height: 20px;
}

.rot-small .rot-cancelled {
    border: 1px solid #ff0000;
}

.rot-small .rot-animfull {
    border: 1px solid #00ff00;
}

.rot-small .rot-unknown {
    border: 1px solid #ffff00;
}

.rot-swap:after {
    content: '\A';
    white-space: pre;
}

.theme-slate .player-cell.active {
    background-color: rgba(50, 120, 0, 0.5);
}

.theme-slate .player-cell:hover:not(.active) {
    background-color: rgba(40, 75, 0, 0.5);
}

.theme-yeti .player-cell.active {
    background-color: rgba(100, 200, 0, 0.5);
}

.theme-yeti .player-cell:hover:not(.active) {
    background-color: rgba(120, 240, 0, 0.5);
}

.theme-slate .target-cell.active {
    border: 2px solid rgba(50, 120, 0, 0.5);
    border-radius: 50%;
    filter: drop-shadow(0px 0px 6px rgba(50, 120, 0, 1.0));
}

.theme-slate .target-cell:hover:not(.active) {
    border: 2px solid rgba(40, 75, 0, 0.5);
    border-radius: 50%;
    filter: drop-shadow(0px 0px 6px rgba(40, 75, 0, 1.0));
}

.theme-yeti .target-cell.active {
    border: 2px solid rgba(100, 200, 0, 0.5);
    border-radius: 50%;
    filter: drop-shadow(0px 0px 6px rgba(100, 200, 0, 1.0));
}

.theme-yeti .target-cell:hover:not(.active) {
    border: 2px solid rgba(120, 240, 0, 0.5);
    border-radius: 50%;
    filter: drop-shadow(0px 0px 6px rgba(120, 240, 0, 1.0));
}

.slidecontainer {
    width: 100%;
}

.slider {
    width: 100%;
    appearance: none;
    height: 25px;
    background: #F3F3F3;
    outline: none;
    opacity: 0.7;
    -webkit-transition: .2s;
    transition: opacity .2s;
}

    .slider:hover {
        opacity: 1;
    }

    .slider::-webkit-slider-thumb {
        -webkit-appearance: none;
        appearance: none;
        width: 25px;
        height: 25px;
        background: #4CAF50;
        cursor: pointer;
    }

    .slider::-moz-range-thumb {
        width: 25px;
        height: 25px;
        background: #4CAF50;
        cursor: pointer;
    }


.theme-yeti table tbody tr.active {
    background-color: rgba(100, 200, 0, 0.5);
}

.theme-slate table tbody tr.active {
    background-color: rgba(50, 120, 0, 0.5);
}

.nav-item .nav-link {
    margin-left: -1px;
    border-radius: 0;
}

.nav-item:first-child .nav-link {
    margin-left: 0;
    border-top-left-radius: 0.25rem;
    border-bottom-left-radius: 0.25rem;
}

.nav-item:last-child .nav-link {
    border-top-right-radius: 0.25rem;
    border-bottom-right-radius: 0.25rem;
}

canvas {
    position: absolute;
}

#main-canvas {
    z-index: 2
}

#bg-canvas {
    z-index: 1
}

</style>
<link href="/css/opensans.css" rel="stylesheet">
<link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.10.19/css/dataTables.bootstrap4.min.css">
<script src="https://code.jquery.com/jquery-3.3.1.min.js" integrity="sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script src="https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js"></script>
<script src="https://cdn.datatables.net/plug-ins/1.10.13/sorting/alt-string.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script>
        function initTheme() {
            window.theme = 'slate';
            if (window.localStorage) {
                var theme = window.localStorage.getItem('ei_theme');
                if (theme) {
                    window.theme = theme;
                    $('#theme').attr('href', 'https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/' + theme + '/bootstrap.min.css');
                }
            }
        }
        function storeTheme(theme) {
            if (window.localStorage) {
                window.localStorage.setItem('ei_theme', theme);
            }
        }
        initTheme();
    </script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.5.17/dist/vue.min.js"></script>
<script>
        var logData = {"targets":[{"name":"Standard Kitty Golem","icon":"/cache/https_wiki.guildwars2.com_images_8_8f_Mini_Professor_Mew.png","health":4000000,"combatReplayID":0,"hbWidth":140,"hbHeight":400,"tough":1374,"minions":[],"percent":100.0,"hpLeft":0.0,"details":{"dmgDistributions":[{"contributedDamage":0,"totalDamage":0,"distribution":[]}],"dmgDistributionsTaken":[{"contributedDamage":4023662,"totalDamage":0,"distribution":[[false,5555,18081,1707,4020,0,6,5,6,0,0.0,0.0],[false,9433,5407,541,717,0,9,9,9,0,0.0,0.0],[false,56883,19467,829,1218,0,20,0,20,0,0.0,0.0],[false,46295,9133,579,1231,0,10,8,10,0,0.0,0.0],[true,723,4242,42,42,0,101,0,0,0,0.0,0.0],[false,737,2261993,0,913,0,3126,0,3116,0,0.0,0.0],[true,861,1313,13,13,0,101,0,0,0,0.0,0.0],[true,736,894079,2,307,0,3442,0,0,0,0.0,0.0],[true,19426,2828,28,28,0,101,0,0,0,0.0,0.0],[false,45313,178652,1049,7008,0,75,65,75,0,0.0,0.0],[false,43074,75869,706,3808,0,54,46,54,0,0.0,0.0],[false,40183,28871,466,1040,0,37,35,37,0,0.0,0.0],[false,51711,40705,2906,3346,0,13,13,13,0,0.0,0.0],[false,44451,55127,5111,8609,0,7,6,7,0,0.0,0.0],[false,56885,6248,480,557,0,12,0,12,0,0.0,0.0],[false,5497,23581,185,423,0,77,71,77,0,0.0,0.0],[false,40709,28941,3922,4296,0,7,7,7,0,0.0,0.0],[false,46447,27840,987,1230,0,25,25,25,0,0.0,0.0],[false,43616,17984,1352,2323,0,9,7,9,0,0.0,0.0],[false,40139,43890,725,1238,0,40,36,40,0,0.0,0.0],[false,39964,51050,1435,3083,0,22,19,22,0,0.0,0.0],[false,40326,44203,1738,3563,0,16,15,16,0,0.0,0.0],[false,43657,70799,2848,5784,0,16,15,16,0,0.0,0.0],[false,5542,9720,693,1245,0,9,7,9,0,0.0,0.0],[false,40170,22720,1362,1583,0,16,16,16,0,0.0,0.0],[false,42271,13566,1642,5247,0,4,4,4,0,0.0,0.0],[false,43080,11776,1584,2594,0,5,4,5,0,0.0,0.0],[false,46024,12481,2224,3641,0,4,3,4,0,0.0,0.0],[false,44681,14029,2729,2837,0,5,5,5,0,0.0,0.0],[false,45259,8557,2019,3296,0,3,2,3,0,0.0,0.0],[false,45216,20510,1472,3917,0,9,9,9,0,0.0,0.0]]}],"rotation":[[]],"boonGraph":[[{"id":-3,"color":"","visible":false,"states":[[0.0,13],[100.847,13]]},{"id":738,"color":"","visible":true,"states":[[0.0,25],[100.847,25]]},{"id":742,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":26766,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":727,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":791,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":721,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":722,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":720,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":19426,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":723,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":861,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":737,"color":"","visible":false,"states":[[0.0,8],[0.204,9],[0.374,13],[0.565,14],[1.131,15],[1.576,16],[2.009,18],[2.092,19],[2.458,20],[2.73,22],[2.818,23],[3.094,24],[3.174,25],[3.214,26],[3.539,27],[3.737,29],[3.776,30],[3.884,31],[4.247,32],[4.611,33],[4.731,34],[4.768,35],[4.965,33],[4.975,34],[5.089,35],[5.767,36],[5.964,35],[6.2,34],[6.37,32],[6.455,31],[6.561,30],[6.724,31],[6.765,32],[6.815,31],[7.087,30],[7.092,31],[7.127,30],[7.171,29],[7.333,31],[7.536,30],[7.774,31],[7.881,30],[7.887,31],[8.083,34],[8.087,33],[8.244,32],[8.446,33],[8.608,32],[8.726,30],[8.77,31],[8.772,30],[8.891,31],[8.972,30],[9.088,33],[9.09,32],[9.57,31],[9.733,29],[9.764,28],[9.771,29],[9.886,31],[9.925,32],[10.081,31],[10.367,29],[10.727,28],[10.763,27],[10.773,28],[10.885,30],[10.925,34],[10.972,35],[11.086,34],[11.761,33],[11.764,34],[11.96,30],[12.002,28],[12.37,29],[12.447,30],[12.72,29],[12.77,28],[12.771,29],[13.015,32],[13.079,30],[13.368,31],[13.733,32],[13.734,33],[13.766,32],[13.769,34],[13.883,33],[14.088,35],[14.366,37],[14.449,39],[14.767,38],[14.805,41],[14.887,40],[15.086,39],[15.171,40],[15.532,41],[15.644,42],[15.769,41],[15.882,39],[15.884,40],[16.37,42],[16.44,41],[16.76,40],[16.881,38],[17.007,39],[17.012,38],[17.326,36],[17.365,35],[17.731,34],[17.767,33],[18.048,35],[18.085,34],[18.132,35],[18.443,34],[18.446,33],[18.765,32],[18.802,31],[19.081,29],[19.13,30],[19.168,29],[19.203,28],[19.529,27],[19.729,26],[19.765,25],[19.881,24],[20.084,23],[20.126,24],[20.294,26],[20.362,25],[20.445,24],[21.124,25],[21.17,26],[21.366,24],[21.727,28],[21.917,27],[22.127,28],[22.36,27],[22.371,28],[22.917,24],[22.964,23],[23.008,21],[23.124,23],[23.128,22],[23.647,24],[23.806,25],[24.044,24],[24.247,26],[24.362,25],[24.652,27],[24.798,25],[24.846,26],[25.122,25],[25.132,26],[25.246,28],[25.725,29],[26.12,28],[26.123,29],[26.251,31],[26.529,32],[27.123,31],[27.132,32],[27.133,33],[27.25,34],[28.12,33],[28.133,34],[28.247,35],[28.486,36],[28.999,35],[29.12,34],[29.122,33],[29.164,32],[29.493,34],[29.648,32],[30.04,31],[30.128,30],[30.243,28],[30.287,26],[30.484,25],[30.489,26],[31.119,25],[31.242,23],[31.486,24],[31.491,23],[31.633,22],[31.689,23],[31.77,24],[32.129,23],[32.207,27],[32.247,25],[32.487,24],[32.492,25],[32.771,26],[32.772,28],[33.129,27],[33.246,26],[33.484,25],[33.64,23],[33.719,19],[33.768,20],[34.243,19],[34.49,18],[34.771,19],[34.851,21],[35.05,22],[35.126,21],[35.133,22],[35.134,23],[35.489,22],[35.733,23],[35.769,25],[35.798,24],[35.931,26],[36.125,28],[36.766,27],[36.767,28],[36.838,27],[37.124,28],[37.415,29],[37.717,28],[37.766,29],[37.767,28],[37.768,26],[38.129,27],[38.168,29],[38.36,28],[38.764,27],[38.766,28],[39.131,30],[39.173,31],[39.284,32],[39.767,31],[39.769,32],[40.653,34],[40.763,35],[40.765,34],[41.046,33],[41.123,35],[41.129,34],[41.13,33],[41.729,32],[41.763,31],[41.765,30],[41.773,31],[41.927,30],[42.014,31],[42.121,29],[42.518,28],[42.526,29],[42.762,28],[42.89,29],[43.12,28],[43.134,32],[43.248,33],[43.603,34],[43.681,33],[43.762,32],[43.925,31],[43.968,32],[44.125,31],[44.199,27],[44.335,28],[44.688,29],[44.765,28],[44.844,26],[45.053,27],[45.127,25],[45.415,27],[45.648,29],[45.759,28],[46.119,26],[46.248,27],[46.409,29],[46.523,28],[46.649,27],[46.769,26],[46.887,25],[47.129,26],[47.245,25],[47.407,26],[47.6,25],[47.887,26],[47.965,25],[48.161,23],[48.332,22],[48.413,23],[48.685,22],[49.05,21],[49.368,24],[49.404,25],[49.407,24],[49.412,23],[50.008,22],[50.404,23],[50.411,22],[50.768,23],[51.165,22],[51.171,23],[51.405,22],[51.414,23],[51.765,24],[51.884,25],[52.168,26],[52.403,25],[52.405,24],[52.413,25],[52.645,24],[53.364,25],[53.404,26],[53.409,25],[53.454,29],[53.763,28],[53.767,29],[54.364,27],[54.4,26],[54.409,27],[54.764,26],[54.774,27],[55.126,23],[55.273,22],[55.4,21],[55.413,22],[55.641,20],[55.765,19],[55.881,18],[56.005,20],[56.41,19],[56.772,18],[57.134,21],[57.167,20],[57.409,19],[57.531,22],[57.88,21],[58.048,22],[58.131,23],[58.164,22],[58.24,21],[58.4,20],[58.604,22],[59.121,21],[59.33,23],[59.405,22],[60.327,23],[60.409,22],[60.412,23],[61.014,24],[61.36,23],[61.403,24],[62.364,25],[62.409,26],[62.527,24],[63.13,22],[63.17,23],[63.405,24],[63.527,23],[63.684,25],[64.044,24],[64.046,25],[64.127,24],[64.284,28],[64.41,30],[64.6,29],[64.774,30],[65.128,29],[65.133,30],[65.356,29],[65.405,30],[65.408,29],[65.446,25],[65.484,26],[65.804,28],[65.855,29],[65.998,27],[66.205,28],[66.399,27],[66.419,28],[66.562,29],[66.654,31],[67.405,30],[67.412,32],[67.681,31],[68.043,30],[68.291,31],[68.401,30],[68.407,29],[68.411,30],[68.771,29],[69.13,28],[69.135,29],[69.323,27],[69.406,26],[69.414,27],[69.481,26],[69.68,25],[69.852,24],[70.047,25],[70.202,24],[70.401,23],[70.413,24],[70.453,25],[70.559,24],[70.596,23],[70.613,24],[70.8,22],[71.164,21],[71.415,20],[71.452,21],[72.088,22],[72.319,21],[72.408,20],[72.45,21],[73.084,22],[73.407,21],[73.445,22],[74.044,24],[74.086,23],[74.091,24],[74.29,25],[74.356,24],[74.366,25],[74.41,24],[74.811,28],[75.082,27],[75.091,28],[75.372,29],[75.409,28],[75.725,29],[75.726,31],[76.043,30],[76.081,31],[76.089,30],[76.276,26],[76.372,27],[76.449,26],[76.647,24],[76.882,26],[77.003,25],[77.089,24],[77.129,23],[77.286,24],[77.367,26],[77.448,25],[77.484,28],[77.809,29],[78.079,28],[78.364,30],[78.446,29],[79.04,27],[79.362,26],[79.369,28],[79.404,27],[79.441,26],[79.885,27],[80.249,28],[80.283,27],[80.366,28],[80.368,27],[80.604,28],[80.963,29],[81.01,30],[81.048,32],[81.204,33],[81.331,34],[81.368,33],[81.37,34],[81.688,35],[81.721,34],[82.051,35],[82.168,37],[82.363,36],[82.371,37],[82.406,38],[82.605,37],[82.769,38],[82.878,37],[83.01,38],[83.282,37],[83.36,36],[83.363,35],[83.372,36],[83.48,35],[83.762,36],[83.805,35],[83.882,34],[84.246,33],[84.365,32],[84.366,33],[84.601,32],[84.772,33],[84.876,32],[84.96,31],[85.127,35],[85.328,34],[85.362,33],[85.685,32],[85.719,30],[86.048,29],[86.282,28],[86.366,27],[86.403,26],[86.531,27],[86.566,28],[86.567,29],[86.763,30],[86.766,29],[86.803,25],[87.006,24],[87.164,22],[87.367,21],[87.477,19],[87.766,20],[88.368,19],[88.85,20],[88.885,21],[89.362,20],[89.758,19],[89.851,20],[90.211,23],[90.356,22],[90.603,23],[90.768,22],[90.848,21],[90.856,22],[90.967,23],[91.004,22],[91.041,20],[91.211,21],[91.33,22],[91.682,23],[91.846,25],[91.849,24],[92.048,25],[92.202,26],[92.408,27],[92.527,26],[92.759,25],[92.773,26],[92.842,27],[92.854,26],[93.13,27],[93.196,26],[93.209,27],[93.488,28],[93.762,27],[93.844,26],[94.044,28],[94.208,29],[94.6,28],[94.84,27],[94.85,28],[94.964,27],[95.207,24],[95.208,25],[95.327,24],[95.358,23],[95.413,27],[95.679,26],[96.045,25],[96.048,26],[96.207,25],[96.208,26],[96.405,25],[96.559,24],[96.56,23],[96.77,22],[96.851,23],[96.879,22],[96.926,24],[97.119,20],[97.127,19],[97.198,18],[97.211,20],[97.448,23],[97.485,22],[97.492,24],[97.842,23],[98.204,24],[98.205,23],[98.282,26],[98.929,28],[99.124,29],[99.204,28],[99.209,29],[99.926,31],[100.004,32],[100.202,33],[100.204,32],[100.847,32]]},{"id":736,"color":"","visible":false,"states":[[0.0,2],[0.373,5],[0.565,6],[0.854,7],[1.131,8],[1.411,9],[1.692,10],[2.092,11],[4.578,12],[4.731,14],[5.047,16],[5.608,17],[5.727,21],[6.249,23],[6.489,24],[6.529,25],[6.724,32],[6.886,36],[6.965,37],[7.006,38],[7.571,39],[7.887,41],[8.771,42],[8.891,43],[8.892,44],[10.558,43],[10.847,42],[10.885,43],[11.124,42],[11.207,45],[11.404,44],[11.685,43],[11.96,42],[13.015,43],[13.602,42],[14.084,41],[15.37,42],[15.565,41],[16.362,38],[16.57,37],[18.048,38],[18.241,36],[18.481,35],[18.521,34],[18.716,31],[18.887,33],[18.957,32],[18.998,31],[19.574,32],[19.575,33],[19.805,34],[20.047,35],[20.127,36],[20.293,39],[20.294,40],[20.335,41],[20.72,39],[20.763,38],[21.036,36],[21.716,32],[22.171,33],[22.713,29],[22.875,25],[22.877,24],[23.876,22],[24.247,23],[24.88,22],[24.881,21],[25.007,20],[26.529,21],[27.196,18],[27.25,20],[27.362,19],[28.247,21],[28.364,23],[28.924,25],[29.448,26],[30.012,27],[30.04,26],[30.489,27],[31.132,28],[31.566,27],[31.567,26],[31.797,25],[32.039,24],[32.119,23],[32.286,22],[32.327,21],[32.646,23],[32.888,24],[32.927,25],[33.125,26],[33.126,27],[33.369,29],[33.405,30],[33.974,31],[34.163,30],[34.486,31],[34.851,34],[34.876,32],[35.05,33],[35.134,35],[35.733,36],[36.125,38],[36.239,37],[36.282,34],[36.918,33],[37.124,35],[37.442,34],[37.894,35],[38.129,37],[38.483,36],[38.521,35],[39.932,36],[40.916,35],[41.968,34],[42.014,35],[42.48,34],[43.124,33],[43.239,31],[44.236,29],[44.335,30],[44.353,28],[44.638,26],[44.88,25],[44.919,24],[45.117,23],[45.118,22],[45.361,20],[45.397,19],[45.647,22],[46.001,21],[46.409,22],[47.725,21],[48.814,22],[49.886,21],[50.731,23],[50.84,20],[50.884,21],[51.039,20],[51.123,18],[51.172,20],[51.291,21],[51.805,22],[51.924,21],[52.114,19],[52.168,21],[52.373,22],[53.113,20],[53.168,25],[53.889,27],[54.006,26],[54.118,24],[54.13,25],[54.169,30],[54.371,32],[54.613,33],[54.65,34],[55.167,36],[55.168,38],[55.206,40],[55.733,41],[56.004,44],[56.294,45],[56.327,44],[57.531,45],[58.401,44],[59.285,43],[59.799,42],[60.327,43],[60.806,42],[61.636,39],[62.409,40],[62.876,39],[63.2,38],[63.727,37],[64.646,38],[65.16,37],[65.881,35],[66.122,34],[66.161,33],[66.363,31],[66.605,30],[66.642,29],[66.654,33],[66.72,31],[67.161,29],[67.198,28],[68.157,26],[68.362,25],[69.157,21],[69.523,20],[69.529,21],[70.158,17],[70.453,19],[71.156,17],[71.157,15],[71.452,17],[71.993,14],[72.05,17],[72.283,16],[72.319,15],[72.45,17],[73.445,19],[74.091,20],[74.401,19],[74.446,23],[75.244,25],[75.492,26],[75.528,27],[75.725,32],[75.971,33],[76.009,34],[76.638,33],[77.287,34],[78.646,33],[79.369,34],[81.521,33],[81.688,34],[82.643,31],[83.411,32],[83.762,33],[83.763,35],[84.042,34],[84.407,36],[84.772,38],[85.492,39],[85.762,43],[86.005,45],[86.083,44],[86.442,42],[86.531,44],[86.566,47],[86.763,49],[86.764,50],[86.803,51],[87.011,53],[87.236,51],[87.252,52],[87.288,53],[87.441,51],[87.484,50],[87.52,49],[87.717,47],[87.766,49],[87.963,48],[88.001,47],[88.039,45],[88.439,43],[88.85,44],[89.279,43],[89.434,41],[90.435,37],[90.881,38],[91.331,39],[91.361,38],[91.405,37],[91.607,38],[91.714,35],[91.885,36],[92.173,37],[92.447,38],[92.448,40],[93.129,43],[93.371,44],[93.41,45],[93.486,44],[93.606,45],[93.68,44],[93.843,45],[93.999,44],[95.208,45],[95.754,44],[97.492,45],[97.997,44],[98.523,42],[98.756,41],[98.795,40],[99.003,38],[99.244,37],[99.28,36],[99.752,34],[99.926,35],[100.396,33],[100.761,31],[100.842,30],[100.847,30]]}]],"minions":[]}}],"players":[{"group":1,"combatReplayID":0,"name":"My Blasts R Awesome","acc":"Roul.3205","profession":"Weaver","condi":10,"conc":0,"heal":0,"tough":0,"minions":[],"l1Set":["Sword","Focus"],"l2Set":[],"a1Set":[],"a2Set":[],"colTarget":"rgb(246,138,135)","colCleave":"rgb(127,74,72)","colTotal":"rgb(127,74,72)","isConjure":false,"details":{"dmgDistributions":[{"contributedDamage":3995887,"totalDamage":3995887,"distribution":[[false,5555,18081,1707,4020,0,6,5,6,0,0.0,0.0],[false,9433,5407,541,717,0,9,9,9,0,0.0,0.0],[false,56883,19467,829,1218,0,20,0,20,0,0.0,0.0],[false,46295,9133,579,1231,2,10,8,10,0,0.0,0.1],[true,736,891251,2,307,0,3341,0,0,0,0.0,0.0],[false,737,2245429,0,913,0,3025,0,3015,0,0.0,0.0],[false,45313,178652,1049,7008,15,75,65,75,0,0.0,1.153],[false,43074,75869,706,3808,6,54,46,54,0,0.0,0.017],[false,40183,28871,466,1040,0,37,35,37,0,0.0,0.0],[false,51711,40705,2906,3346,14,13,13,13,0,0.0,0.321],[false,44451,55127,5111,8609,7,7,6,7,0,0.0,0.0],[false,56885,6248,480,557,0,12,0,12,0,0.0,0.0],[false,5497,23581,185,423,7,77,71,77,0,0.0,1.676],[false,40709,28941,3922,4296,7,7,7,7,0,0.0,0.0],[false,46447,27840,987,1230,5,25,25,25,0,0.0,0.0],[false,43616,17984,1352,2323,17,9,7,9,0,0.793,0.092],[false,40139,43890,725,1238,5,40,36,40,0,0.0,0.191],[false,39964,51050,1435,3083,31,22,19,22,0,0.528,0.005],[false,40326,44203,1738,3563,21,16,15,16,0,0.806,0.008],[false,43657,70799,2848,5784,16,16,15,16,0,0.0,0.244],[false,5542,9720,693,1245,9,9,7,9,0,0.0,0.726],[false,40170,22720,1362,1583,2,16,16,16,0,0.0,0.068],[false,42271,13566,1642,5247,2,4,4,4,0,0.0,0.234],[false,43080,11776,1584,2594,6,5,4,5,0,0.201,0.002],[false,46024,12481,2224,3641,4,4,3,4,0,0.0,0.033],[false,44681,14029,2729,2837,7,5,5,5,0,0.161,0.127],[false,45259,8557,2019,3296,3,3,2,3,0,0.0,0.004],[false,45216,20510,1472,3917,3,9,9,9,0,0.0,0.116],[0,43638,0,-1,0,1,0,0,0,0,0.0,0.0]]}],"dmgDistributionsTargets":[[{"contributedDamage":3995887,"totalDamage":3995887,"distribution":[[false,5555,18081,1707,4020,0,6,5,6,0,0.0,0.0],[false,9433,5407,541,717,0,9,9,9,0,0.0,0.0],[false,56883,19467,829,1218,0,20,0,20,0,0.0,0.0],[false,46295,9133,579,1231,2,10,8,10,0,0.0,0.1],[true,736,891251,2,307,0,3341,0,0,0,0.0,0.0],[false,737,2245429,0,913,0,3025,0,3015,0,0.0,0.0],[false,45313,178652,1049,7008,15,75,65,75,0,0.0,1.153],[false,43074,75869,706,3808,6,54,46,54,0,0.0,0.017],[false,40183,28871,466,1040,0,37,35,37,0,0.0,0.0],[false,51711,40705,2906,3346,14,13,13,13,0,0.0,0.321],[false,44451,55127,5111,8609,7,7,6,7,0,0.0,0.0],[false,56885,6248,480,557,0,12,0,12,0,0.0,0.0],[false,5497,23581,185,423,7,77,71,77,0,0.0,1.676],[false,40709,28941,3922,4296,7,7,7,7,0,0.0,0.0],[false,46447,27840,987,1230,5,25,25,25,0,0.0,0.0],[false,43616,17984,1352,2323,17,9,7,9,0,0.793,0.092],[false,40139,43890,725,1238,5,40,36,40,0,0.0,0.191],[false,39964,51050,1435,3083,31,22,19,22,0,0.528,0.005],[false,40326,44203,1738,3563,21,16,15,16,0,0.806,0.008],[false,43657,70799,2848,5784,16,16,15,16,0,0.0,0.244],[false,5542,9720,693,1245,9,9,7,9,0,0.0,0.726],[false,40170,22720,1362,1583,2,16,16,16,0,0.0,0.068],[false,42271,13566,1642,5247,2,4,4,4,0,0.0,0.234],[false,43080,11776,1584,2594,6,5,4,5,0,0.201,0.002],[false,46024,12481,2224,3641,4,4,3,4,0,0.0,0.033],[false,44681,14029,2729,2837,7,5,5,5,0,0.161,0.127],[false,45259,8557,2019,3296,3,3,2,3,0,0.0,0.004],[false,45216,20510,1472,3917,3,9,9,9,0,0.0,0.116],[0,43638,0,-1,0,1,0,0,0,0,0.0,0.0]]}]],"dmgDistributionsTaken":[{"contributedDamage":0,"totalDamage":0,"distribution":[]}],"rotation":[[[0.062,46295,912,1,1],[0.974,45313,720,1,1],[1.694,43074,557,1,1],[2.251,51711,360,1,1],[2.611,44451,603,3,1],[3.215,39964,1,2,1],[3.216,5497,562,1,1],[3.778,43616,89,2,1],[3.867,46447,463,1,1],[4.33,40709,1007,1,1],[5.337,43616,352,1,1],[5.889,40139,1403,1,1],[7.292,43616,356,1,1],[7.848,45313,720,1,1],[8.568,39964,440,1,1],[9.008,40326,444,1,1],[9.452,43657,605,1,1],[10.14,51711,354,1,1],[10.495,5542,518,1,1],[11.013,39964,440,1,1],[11.453,40326,443,1,1],[11.897,43657,677,1,1],[12.574,44681,37,2,1],[12.611,43074,560,1,1],[13.171,39964,444,1,1],[13.615,40326,155,2,1],[13.771,45313,732,1,1],[14.503,39964,429,1,1],[14.932,40326,126,2,1],[15.059,44451,585,3,1],[15.659,39964,428,1,1],[16.087,40326,443,1,1],[16.53,43657,602,1,1],[17.213,51711,356,1,1],[17.57,5497,564,1,1],[18.134,43616,37,2,1],[18.171,40709,995,1,1],[19.166,40170,1405,1,1],[20.571,45313,718,1,1],[21.289,5542,527,1,1],[21.816,42271,641,1,1],[22.457,39964,437,1,1],[22.895,40326,440,1,1],[23.335,43657,681,1,1],[24.016,51711,364,1,1],[24.38,39964,433,1,1],[24.813,40326,445,1,1],[25.258,43657,674,1,1],[25.933,39964,0,2,1],[25.933,44451,596,3,1],[26.53,45313,721,1,1],[27.251,46447,406,1,1],[27.657,40709,992,1,1],[28.649,43616,442,1,1],[29.091,43080,438,1,1],[29.529,46024,687,1,1],[30.216,43616,440,1,1],[30.656,43080,201,2,1],[30.858,51711,354,1,1],[31.212,5497,559,1,1],[31.771,5542,526,1,1],[32.297,40139,1400,1,1],[33.697,43616,434,1,1],[34.131,43080,446,1,1],[34.577,46024,682,1,1],[35.259,39964,78,2,1],[35.337,45313,721,1,1],[36.058,39964,441,1,1],[36.499,40326,436,1,1],[36.935,43657,678,1,1],[37.613,39964,443,1,1],[38.056,40326,278,2,1],[38.335,51711,359,1,1],[38.694,44451,591,3,1],[39.297,39964,434,1,1],[39.731,40326,443,1,1],[40.174,43657,687,1,1],[40.861,39964,395,1,1],[41.413,45313,728,1,1],[42.141,43074,552,1,1],[42.693,5542,516,1,1],[43.209,44681,448,1,1],[43.657,45259,436,1,1],[44.093,45216,724,1,1],[44.854,5497,563,1,1],[45.417,51711,356,1,1],[45.773,39964,440,1,1],[46.213,40326,436,1,1],[46.649,43657,643,1,1],[47.292,45313,731,1,1],[48.023,39964,428,1,1],[48.451,40326,448,1,1],[48.9,43657,633,1,1],[49.533,46447,394,1,1],[49.927,43616,84,2,1],[50.011,40709,1004,1,1],[51.015,43616,443,1,1],[51.458,43080,441,1,1],[51.899,46024,633,1,1],[52.532,51711,359,1,1],[52.891,43616,127,2,1],[53.018,5542,515,1,1],[53.533,40139,1407,1,1],[54.94,43616,434,1,1],[55.374,43080,442,1,1],[55.817,46024,677,1,1],[56.495,39964,37,2,1],[56.532,45313,733,1,1],[57.265,39964,425,1,1],[57.69,40326,442,1,1],[58.132,43657,687,1,1],[58.819,39964,438,1,1],[59.257,40326,247,2,1],[59.504,51711,354,1,1],[59.858,5497,555,1,1],[60.414,44451,600,3,1],[61.015,39964,436,1,1],[61.451,40326,444,1,1],[61.895,43657,603,1,1],[62.576,45313,727,1,1],[63.303,43074,554,1,1],[63.857,5542,516,1,1],[64.373,44681,441,1,1],[64.814,45259,447,1,1],[65.261,45216,750,1,1],[66.011,44681,362,1,1],[66.564,51711,367,1,1],[66.931,39964,445,1,1],[67.376,40326,448,1,1],[67.824,43657,667,1,1],[68.491,39964,51,2,1],[68.542,45313,710,1,1],[69.252,39964,450,1,1],[69.702,40326,443,1,1],[70.145,43657,675,1,1],[70.859,46447,387,1,1],[71.246,43616,85,2,1],[71.331,40709,1001,1,1],[72.332,43616,239,2,1],[72.571,43638,806,1,1],[73.377,43616,80,2,1],[73.457,51711,357,1,1],[73.814,5497,565,1,1],[74.379,5542,512,1,1],[74.891,40139,1407,1,1],[76.298,45313,727,1,1],[77.025,39964,433,1,1],[77.459,40326,440,1,1],[77.899,43657,678,1,1],[78.577,39964,200,2,1],[78.777,44451,592,3,1],[79.37,44681,124,2,1],[79.494,43074,781,1,1],[80.381,51711,348,1,1],[80.729,44681,452,1,1],[81.181,45259,441,1,1],[81.622,45216,750,1,1],[82.42,45313,716,1,1],[83.136,43616,405,1,1],[83.69,40709,1009,1,1],[84.699,5542,522,1,1],[85.221,43616,429,1,1],[85.65,43080,440,1,1],[86.179,40139,1392,1,1],[87.572,39964,46,2,1],[87.618,46447,676,1,1],[88.294,45313,725,1,1],[89.019,44681,311,1,1],[89.576,51711,0,2,1],[89.656,5497,556,1,1],[90.212,43074,562,1,1],[90.774,43616,52,2,1],[90.826,46295,670,1,1],[91.734,40709,999,1,1],[92.733,40170,1407,1,1],[94.14,39964,115,2,1],[94.255,45313,718,1,1],[94.973,5542,522,1,1],[95.495,42271,645,1,1],[96.14,39964,433,1,1],[96.573,40326,442,1,1],[97.015,43657,677,1,1],[97.692,39964,0,2,1],[97.692,44451,590,3,1],[98.294,51711,370,1,1],[98.664,39964,427,1,1],[99.091,40326,446,1,1],[99.537,43657,678,1,1],[100.215,39964,478,1,1],[100.693,40326,482,1,1]]],"boonGraph":[[{"id":-2,"color":"","visible":false,"states":[[0.0,12],[100.847,12]]},{"id":-16,"color":"","visible":false,"states":[[0.0,0],[90.565,1],[92.287,0],[100.847,0]]},{"id":-5,"color":"","visible":false,"states":[[0.0,0],[20.293,1],[23.646,0],[94.043,1],[97.448,0],[100.847,0]]},{"id":-10,"color":"","visible":false,"states":[[0.0,0],[18.494,1],[20.293,0],[92.287,1],[94.043,0],[100.847,0]]},{"id":-11,"color":"","visible":false,"states":[[0.0,0],[11.207,1],[13.014,0],[41.607,1],[45.647,0],[62.81,1],[66.653,0],[79.294,1],[81.047,0],[88.649,1],[90.565,0],[100.847,0]]},{"id":5544,"color":"","visible":false,"states":[[0.0,0],[9.652,1],[10.925,0],[20.608,1],[21.727,0],[31.41,1],[32.207,0],[41.884,1],[43.134,0],[52.803,1],[53.454,0],[63.124,1],[64.284,0],[73.968,1],[74.811,0],[84.483,1],[85.127,0],[94.807,1],[95.412,0],[100.847,0]]},{"id":-7,"color":"","visible":false,"states":[[0.0,0],[7.332,1],[9.087,0],[34.851,1],[38.167,0],[56.004,1],[59.33,0],[75.725,1],[77.484,0],[86.566,1],[88.649,0],[100.847,0]]},{"id":44857,"color":"","visible":false,"states":[[0.0,0],[5.528,1],[7.332,0],[31.485,1],[34.851,0],[52.729,1],[56.004,0],[74.044,1],[75.725,0],[84.811,1],[86.566,0],[100.847,0]]},{"id":-14,"color":"","visible":false,"states":[[0.0,0],[3.738,1],[5.528,0],[16.691,1],[18.494,0],[26.972,1],[31.485,0],[49.097,1],[52.729,0],[70.047,1],[74.044,0],[82.932,1],[84.811,0],[100.847,0]]},{"id":42416,"color":"","visible":false,"states":[[0.0,0],[2.009,1],[22.804,0],[23.647,1],[46.168,0],[52.731,1],[67.33,0],[74.044,1],[92.811,0],[97.448,1],[100.847,1]]},{"id":43470,"color":"","visible":false,"states":[[0.0,0],[2.008,1],[3.738,0],[9.087,1],[11.207,0],[14.804,1],[16.691,0],[23.646,1],[26.972,0],[38.167,1],[41.607,0],[59.33,1],[62.81,0],[77.484,1],[79.294,0],[97.448,1],[100.847,1]]},{"id":42086,"color":"","visible":false,"states":[[0.0,0],[1.727,1],[10.888,0],[23.244,1],[28.244,0],[34.13,1],[39.13,0],[50.171,1],[55.171,0],[69.451,1],[74.451,0],[82.769,1],[87.769,0],[97.929,1],[100.847,1]]},{"id":5677,"color":"","visible":false,"states":[[0.0,0],[0.374,1],[2.576,0],[7.333,1],[10.455,0],[13.015,1],[17.532,0],[20.294,1],[24.332,0],[27.133,1],[31.166,0],[34.851,1],[38.643,0],[42.014,1],[45.732,0],[47.887,1],[52.887,0],[56.005,1],[59.005,0],[59.33,1],[59.809,0],[63.17,1],[66.892,0],[69.135,1],[73.768,0],[75.726,1],[80.492,0],[81.048,1],[89.566,0],[94.044,1],[98.612,0],[100.847,0]]},{"id":-6,"color":"","visible":false,"states":[[0.0,0],[0.373,1],[2.008,0],[13.014,1],[14.804,0],[45.647,1],[49.097,0],[66.653,1],[70.047,0],[81.047,1],[82.932,0],[100.847,0]]},{"id":15794,"color":"","visible":false,"states":[[0.0,0],[0.204,1],[3.204,0],[19.605,1],[22.605,0],[35.733,1],[38.733,0],[53.603,1],[56.603,0],[75.326,1],[78.326,0],[93.208,1],[96.208,0],[100.847,0]]},{"id":46273,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":42061,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":21828,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":739,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":5739,"color":"","visible":false,"states":[[0.0,4],[0.565,0],[13.494,5],[14.448,0],[35.133,4],[36.125,0],[56.328,5],[58.604,0],[76.606,3],[76.607,5],[77.809,0],[96.77,5],[97.492,0],[100.847,0]]},{"id":14055,"color":"rgb(0,255,0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":50413,"color":"rgb(255, 102, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":50421,"color":"","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":14222,"color":"rgb(255, 153, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":14449,"color":"rgb(0, 51, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":14417,"color":"rgb(153, 0, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":26980,"color":"rgb(255, 153, 102)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":873,"color":"rgb(255, 51, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":719,"color":"rgb(255,255,0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":1122,"color":"rgb(153, 102, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":743,"color":"rgb(102,255,255)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":726,"color":"rgb(102, 153, 0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":718,"color":"rgb(0,204,0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":717,"color":"rgb(102,255,255)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":30328,"color":"rgb(0,102,255)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":1187,"color":"rgb(255,0,255)","visible":true,"states":[[0.0,1],[100.847,1]]},{"id":725,"color":"rgb(255,153,0)","visible":false,"states":[[0.0,1],[100.847,1]]},{"id":740,"color":"rgb(153,0,0)","visible":true,"states":[[0.0,25],[100.847,25]]}]],"food":[{"time":0.0,"duration":523.284,"id":46273,"stack":1,"dimished":false},{"time":0.0,"duration":523.766,"id":21828,"stack":1,"dimished":false}],"minions":[]}}],"enemies":[],"phases":[{"name":"Full Fight","duration":100847,"start":0.0,"end":100.847,"targets":[0],"dpsStats":[[3995887,39623,859207,8520,3136680,31103]],"dpsStatsTargets":[[[3995887,39623,859207,8520,3136680,31103]]],"dmgStatsTargets":[[[511,511,432,777141,510,0,0,0,0]]],"dmgStats":[[511,511,432,777141,510,0,0,0,0,2.489,25,5.117,75,0,0.0]],"defStats":[[0,0,0,0,0,0,0,0,"0% downed",0,"100% Alive"]],"supportStats":[[0,0.0,0,0.0,0,0.0,0,0.0]],"boonStats":[{"avg":12.0,"data":[[25.0,100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[1.0,100.0],[100.0],[100.0],[100.0]]}],"boonGenSelfStats":[{"avg":0.0,"data":[[25.0,25.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[1.0,1.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0],[100.0,100.0,0.0,0.0,0.0,0.0]]}],"boonGenGroupStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"boonGenOGroupStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"boonGenSquadStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"offBuffStats":[{"avg":0.0,"data":[[100.0],[100.0],[100.0],[100.0],[100.0],[100.0]]}],"offBuffGenSelfStats":[{"avg":0.0,"data":[[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0]]}],"offBuffGenGroupStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"offBuffGenOGroupStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"offBuffGenSquadStats":[{"avg":0.0,"data":[[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0],[0,0,0,0,0,0]]}],"defBuffStats":[{"avg":0.0,"data":[]}],"defBuffGenSelfStats":[{"avg":0.0,"data":[]}],"defBuffGenGroupStats":[{"avg":0.0,"data":[]}],"defBuffGenOGroupStats":[{"avg":0.0,"data":[]}],"defBuffGenSquadStats":[{"avg":0.0,"data":[]}],"persBuffStats":[{"avg":0.0,"data":[[0.32,6.66],[100.0],[100.0],[17.85],[12.05],[0.37,36.77],[21.01],[79.41],[17.47],[11.78],[12.14],[8.27],[13.25],[3.53],[6.7],[1.71]]}],"dmgModifiersCommon":[{"data":[[0,6876,0,3995887],[511,511,859207.0,-1]],"dataTarget":[[[6876,6876,799177.40000002238,3995887],[511,511,859207.0,-1]]]}],"dmgModifiersItem":[{"data":[[511,511,40914.619047619046,859207],[264,511,38950.909090909096,859207],[510,511,78109.727272727279,859207],[511,511,40914.619047619024,859207],[267,511,43236.454545454522,859207],[0,511,0,859207],[0,511,0,859207],[0,511,0,859207],[511,511,40914.619047619024,859207]],"dataTarget":[[[511,511,40914.619047619046,859207],[264,511,38950.909090909096,859207],[510,511,78109.727272727279,859207],[511,511,40914.619047619024,859207],[267,511,43236.454545454522,859207],[511,511,56209.803738317722,859207],[511,511,56209.803738317722,859207],[511,511,56209.803738317722,859207],[511,511,40914.619047619024,859207]]]}],"dmgModifiersPers":[{"data":[[264,511,71410.0,3995887],[511,511,78109.727272727279,3995887],[511,511,166298.12903225806,3995887],[6365,6365,285152.72727272764,3995887],[417,511,64647.818181818147,3995887],[511,511,56209.803738317722,3995887],[0,511,0,3995887],[0,511,0,3995887]],"dataTarget":[[[264,511,71410.0,3995887],[511,511,78109.727272727279,3995887],[511,511,166298.12903225806,3995887],[6365,6365,285152.72727272764,3995887],[417,511,64647.818181818147,3995887],[511,511,56209.803738317722,3995887],[511,511,78109.7272727272,3995887],[511,511,40914.619047619024,3995887]]]}],"targetsCondiStats":[[{"avg":0.0,"data":[[30.89,30.89,0.0,0.0,0.0,0.0],[26.19,26.19,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,16.05,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0],[0.0,0.0,0.0,0.0,0.0,0.0]]}]],"targetsCondiTotals":[{"avg":13.0,"data":[[31.89,100.0],[27.19,100.0],[1.0,100.0],[1.0,100.0],[1.0,100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[100.0],[25.0,100.0]]}],"targetsBoonTotals":[null],"mechanicStats":[[]],"enemyMechanicStats":[]}],"boons":[740,725,1187,30328,717,718,726,743,1122,719,873,26980],"offBuffs":[14417,14449,14222,50421,50413,14055],"defBuffs":[],"dmgModifiersItem":[-1339402349,-638064328,232999904,1256272418,1312109175,-1874375611,562484599,-988732892,1216166252],"dmgModifiersCommon":[-930281051,791634706],"dmgModifiersPers":{"Weaver":[1046688063,-163120218,-440792669,677996733,1851654695,-420782832,-1035102360,500729987]},"persBuffs":{"Weaver":[5739,739,42061,15794,-6,42086,43470,42416,-14,44857,-7,5544,-11,-10,-5,-16]},"conditions":[736,737,861,723,19426,720,722,721,791,727,26766,742,738],"skillMap":{"s46295":{"id":46295,"name":"Gale Strike","icon":"/cache/https_render.guildwars2.com_file_BB51AAF648980C472D14E03003ED17AAED5B24E9_1770373.png","aa":false},"s45313":{"id":45313,"name":"Flame Uprising","icon":"/cache/https_render.guildwars2.com_file_C4EF2F0EB22C2D0AEB40F6ADDD80F2A3D4BB0B7B_1770369.png","aa":false},"s43074":{"id":43074,"name":"Pyro Vortex","icon":"/cache/https_render.guildwars2.com_file_04720B7D45462D026116FBE03B931730AE45F319_1770376.png","aa":false},"s51711":{"id":51711,"name":"Transmute Fire","icon":"/cache/https_render.guildwars2.com_file_7AD6E1794841A50751E02F0C367E920CF5066F65_2029300.png","aa":false},"s44451":{"id":44451,"name":"Cauterizing Strike","icon":"/cache/https_render.guildwars2.com_file_5CF5932ACF2EB9D17BE4DC634BB01EB3CC37070F_1770375.png","aa":false},"s39964":{"id":39964,"name":"Fire Strike","icon":"/cache/https_render.guildwars2.com_file_01BBF5AFE8D46FAE7F3ABE04A7EA2065E203A010_1770361.png","aa":true},"s5497":{"id":5497,"name":"Flamewall","icon":"/cache/https_render.guildwars2.com_file_B84B697E69B44D5EC3A0306AA2FB3128BBF30F78_103271.png","aa":false},"s43616":{"id":43616,"name":"Crystal Slash","icon":"/cache/https_render.guildwars2.com_file_083CE8B4C86A115123440703072E0E453D1A0A27_1770358.png","aa":true},"s46447":{"id":46447,"name":"Lava Skin","icon":"/cache/https_render.guildwars2.com_file_C328476928DFDE7FF3C2F65143FC7852C3F69CF9_1770377.png","aa":false},"s40709":{"id":40709,"name":"Earthen Vortex","icon":"/cache/https_render.guildwars2.com_file_2F12CFE8B84805BEBB563D0897E6102DB380512D_1770368.png","aa":false},"s40139":{"id":40139,"name":"Rust Frenzy","icon":"/cache/https_render.guildwars2.com_file_B16E9EE2AACD62042A64356334DC726E1E7FBF7B_1770372.png","aa":false},"s40326":{"id":40326,"name":"Fire Swipe","icon":"/cache/https_render.guildwars2.com_file_515620A36869D978A1E66FA135446D77A3C94F50_1770362.png","aa":true},"s43657":{"id":43657,"name":"Searing Slash","icon":"/cache/https_render.guildwars2.com_file_365C7D9672533C765C4DC819FC263D4C38AE0B1E_1770363.png","aa":true},"s5542":{"id":5542,"name":"Signet of Fire","icon":"/cache/https_render.guildwars2.com_file_78F000A3121FCFF9B56EA62625186F0E06D8A458_103340.png","aa":false},"s44681":{"id":44681,"name":"Charged Strike","icon":"/cache/https_render.guildwars2.com_file_69521650FA42B136CCCBA3EC01EED74C3BF3A3DA_1770355.png","aa":true},"s40170":{"id":40170,"name":"Natural Frenzy","icon":"/cache/https_render.guildwars2.com_file_040D09DE34ECA5207298BFE60DAF75173A3DA371_1770374.png","aa":false},"s42271":{"id":42271,"name":"Twin Strike","icon":"/cache/https_render.guildwars2.com_file_A9AF29CA2FF6925E30299CFC9B41317128132CF1_1770378.png","aa":false},"s43080":{"id":43080,"name":"Crystalline Strike","icon":"/cache/https_render.guildwars2.com_file_0D06CA7F9D03A4166900C4003DBB0EE910736A08_1770359.png","aa":true},"s46024":{"id":46024,"name":"Crystalline Sunder","icon":"/cache/https_render.guildwars2.com_file_03586ED169D344CFAA513763B616C152F839C153_1770360.png","aa":true},"s45259":{"id":45259,"name":"Polaric Slash","icon":"/cache/https_render.guildwars2.com_file_CAB0C907C03A00540849085DE2ACAB54BF0156DE_1770356.png","aa":true},"s45216":{"id":45216,"name":"Call Lightning","icon":"/cache/https_render.guildwars2.com_file_166E751B3C56196EC1E8B323400C5AFCEC3C0C01_1770357.png","aa":true},"s43638":{"id":43638,"name":"Weave Self","icon":"/cache/https_render.guildwars2.com_file_E656D3A8B1339603A70BBB7237F2BA004258ED55_1770326.png","aa":false},"s5555":{"id":5555,"name":"Magnetic Wave","icon":"/cache/https_render.guildwars2.com_file_BBF16D6BF9CDA755420759F7D5F8D3FF6B2065DA_103343.png","aa":false},"s9433":{"id":9433,"name":"Ring of Earth","icon":"/cache/https_render.guildwars2.com_file_1D55D34FB4EE20B1962E315245E40CA5E1042D0E_62248.png","aa":false},"s56883":{"id":56883,"name":"Sunspot","icon":"/cache/https_render.guildwars2.com_file_1D55D34FB4EE20B1962E315245E40CA5E1042D0E_62248.png","aa":false},"s737":{"id":737,"name":"Burning","icon":"/cache/https_render.guildwars2.com_file_1D55D34FB4EE20B1962E315245E40CA5E1042D0E_62248.png","aa":false},"s40183":{"id":40183,"name":"Primordial Stance","icon":"/cache/https_render.guildwars2.com_file_9A03F9CFBBE6154A41B1B5CAC4060092C11FABDA_1770332.png","aa":false},"s56885":{"id":56885,"name":"Earthen Blast","icon":"/cache/https_render.guildwars2.com_file_1D55D34FB4EE20B1962E315245E40CA5E1042D0E_62248.png","aa":false}},"buffMap":{"b46273":{"id":46273,"name":"Red-Lentil Saobosa","icon":"/cache/https_wiki.guildwars2.com_images_a_a8_Red-Lentil_Saobosa.png","stacking":false,"consumable":true,"enemy":false},"b21828":{"id":21828,"name":"Toxic Focusing Crystal","icon":"/cache/https_wiki.guildwars2.com_images_d_de_Toxic_Focusing_Crystal.png","stacking":false,"consumable":true,"enemy":false},"b736":{"id":736,"name":"Bleeding","icon":"/cache/https_wiki.guildwars2.com_images_3_33_Bleeding.png","stacking":true,"consumable":false,"enemy":false},"b740":{"id":740,"name":"Might","icon":"/cache/https_wiki.guildwars2.com_images_7_7c_Might.png","stacking":true,"consumable":false,"enemy":false},"b725":{"id":725,"name":"Fury","icon":"/cache/https_wiki.guildwars2.com_images_4_46_Fury.png","stacking":false,"consumable":false,"enemy":false},"b1187":{"id":1187,"name":"Quickness","icon":"/cache/https_wiki.guildwars2.com_images_b_b4_Quickness.png","stacking":false,"consumable":false,"enemy":false},"b30328":{"id":30328,"name":"Alacrity","icon":"/cache/https_wiki.guildwars2.com_images_4_4c_Alacrity.png","stacking":false,"consumable":false,"enemy":false},"b717":{"id":717,"name":"Protection","icon":"/cache/https_wiki.guildwars2.com_images_6_6c_Protection.png","stacking":false,"consumable":false,"enemy":false},"b718":{"id":718,"name":"Regeneration","icon":"/cache/https_wiki.guildwars2.com_images_5_53_Regeneration.png","stacking":false,"consumable":false,"enemy":false},"b726":{"id":726,"name":"Vigor","icon":"/cache/https_wiki.guildwars2.com_images_f_f4_Vigor.png","stacking":false,"consumable":false,"enemy":false},"b743":{"id":743,"name":"Aegis","icon":"/cache/https_wiki.guildwars2.com_images_e_e5_Aegis.png","stacking":false,"consumable":false,"enemy":false},"b1122":{"id":1122,"name":"Stability","icon":"/cache/https_wiki.guildwars2.com_images_a_ae_Stability.png","stacking":true,"consumable":false,"enemy":false},"b719":{"id":719,"name":"Swiftness","icon":"/cache/https_wiki.guildwars2.com_images_a_af_Swiftness.png","stacking":false,"consumable":false,"enemy":false},"b873":{"id":873,"name":"Retaliation","icon":"/cache/https_wiki.guildwars2.com_images_5_53_Retaliation.png","stacking":false,"consumable":false,"enemy":false},"b26980":{"id":26980,"name":"Resistance","icon":"/cache/https_wiki.guildwars2.com_images_4_4b_Resistance.png","stacking":false,"consumable":false,"enemy":false},"b14417":{"id":14417,"name":"Banner of Strength","icon":"/cache/https_wiki.guildwars2.com_images_thumb_e_e1_Banner_of_Strength.png_33px-Banner_of_Strength.png","stacking":false,"consumable":false,"enemy":false},"b14449":{"id":14449,"name":"Banner of Discipline","icon":"/cache/https_wiki.guildwars2.com_images_thumb_5_5f_Banner_of_Discipline.png_33px-Banner_of_Discipline.png","stacking":false,"consumable":false,"enemy":false},"b14222":{"id":14222,"name":"Empower Allies","icon":"/cache/https_wiki.guildwars2.com_images_thumb_4_4c_Empower_Allies.png_20px-Empower_Allies.png","stacking":false,"consumable":false,"enemy":false},"b50421":{"id":50421,"name":"Frost Spirit","icon":"/cache/https_wiki.guildwars2.com_images_thumb_c_c6_Frost_Spirit.png_33px-Frost_Spirit.png","stacking":false,"consumable":false,"enemy":false},"b50413":{"id":50413,"name":"Sun Spirit","icon":"/cache/https_wiki.guildwars2.com_images_thumb_d_dd_Sun_Spirit.png_33px-Sun_Spirit.png","stacking":false,"consumable":false,"enemy":false},"b14055":{"id":14055,"name":"Spotter","icon":"/cache/https_wiki.guildwars2.com_images_b_b0_Spotter.png","stacking":false,"consumable":false,"enemy":false},"b5739":{"id":5739,"name":"Glyph of Elemental Power (Fire)","icon":"/cache/https_wiki.guildwars2.com_images_f_f2_Glyph_of_Elemental_Power__28fire_29.png","stacking":true,"consumable":false,"enemy":false},"b739":{"id":739,"name":"Signet of Restoration","icon":"/cache/https_wiki.guildwars2.com_images_d_dd_Signet_of_Restoration.png","stacking":false,"consumable":false,"enemy":false},"b42061":{"id":42061,"name":"Weaver's Prowess","icon":"/cache/https_wiki.guildwars2.com_images_7_75_Weaver_27s_Prowess.png","stacking":false,"consumable":false,"enemy":false},"b15794":{"id":15794,"name":"Magnetic Wave","icon":"/cache/https_wiki.guildwars2.com_images_3_32_Magnetic_Wave.png","stacking":false,"consumable":false,"enemy":false},"b-6":{"id":-6,"name":"Fire Air Attunement","icon":"https://i.imgur.com/kKFJ8cT.png","stacking":false,"consumable":false,"enemy":false},"b5677":{"id":5677,"name":"Fire Aura","icon":"/cache/https_wiki.guildwars2.com_images_1_18_Fire_Shield.png","stacking":false,"consumable":false,"enemy":false},"b42086":{"id":42086,"name":"Primordial Stance","icon":"/cache/https_wiki.guildwars2.com_images_3_3a_Primordial_Stance.png","stacking":true,"consumable":false,"enemy":false},"b43470":{"id":43470,"name":"Dual Fire Attunement","icon":"/cache/https_wiki.guildwars2.com_images_b_b4_Fire_Attunement.png","stacking":false,"consumable":false,"enemy":false},"b42416":{"id":42416,"name":"Elements of Rage","icon":"/cache/https_wiki.guildwars2.com_images_a_a2_Elements_of_Rage.png","stacking":false,"consumable":false,"enemy":false},"b-14":{"id":-14,"name":"Earth Fire Attunement","icon":"https://i.imgur.com/aJWvE0I.png","stacking":false,"consumable":false,"enemy":false},"b44857":{"id":44857,"name":"Dual Earth Attunement","icon":"/cache/https_wiki.guildwars2.com_images_a_a8_Earth_Attunement.png","stacking":false,"consumable":false,"enemy":false},"b-7":{"id":-7,"name":"Fire Earth Attunement","icon":"https://i.imgur.com/T4187h0.png","stacking":false,"consumable":false,"enemy":false},"b5544":{"id":5544,"name":"Signet of Fire","icon":"/cache/https_wiki.guildwars2.com_images_b_b0_Signet_of_Fire.png","stacking":false,"consumable":false,"enemy":false},"b-11":{"id":-11,"name":"Air Fire Attunement","icon":"https://i.imgur.com/vf68GJm.png","stacking":false,"consumable":false,"enemy":false},"b-10":{"id":-10,"name":"Water Earth Attunement","icon":"https://i.imgur.com/QKEtF2P.png","stacking":false,"consumable":false,"enemy":false},"b-5":{"id":-5,"name":"Fire Water Attunement","icon":"https://i.imgur.com/ihqKuUJ.png","stacking":false,"consumable":false,"enemy":false},"b-16":{"id":-16,"name":"Earth Air Attunement","icon":"https://i.imgur.com/4Eti7Pb.png","stacking":false,"consumable":false,"enemy":false},"b-2":{"id":-2,"name":"Number of Boons","icon":"/cache/https_wiki.guildwars2.com_images_4_44_Boon_Duration.png","stacking":true,"consumable":false,"enemy":false},"b723":{"id":723,"name":"Poison","icon":"/cache/https_wiki.guildwars2.com_images_1_11_Poisoned.png","stacking":true,"consumable":false,"enemy":false},"b861":{"id":861,"name":"Confusion","icon":"/cache/https_wiki.guildwars2.com_images_e_e6_Confusion.png","stacking":true,"consumable":false,"enemy":false},"b19426":{"id":19426,"name":"Torment","icon":"/cache/https_wiki.guildwars2.com_images_0_08_Torment.png","stacking":true,"consumable":false,"enemy":false},"b737":{"id":737,"name":"Burning","icon":"/cache/https_wiki.guildwars2.com_images_4_45_Burning.png","stacking":true,"consumable":false,"enemy":false},"b720":{"id":720,"name":"Blind","icon":"/cache/https_wiki.guildwars2.com_images_3_33_Blinded.png","stacking":false,"consumable":false,"enemy":false},"b722":{"id":722,"name":"Chilled","icon":"/cache/https_wiki.guildwars2.com_images_a_a6_Chilled.png","stacking":false,"consumable":false,"enemy":false},"b721":{"id":721,"name":"Crippled","icon":"/cache/https_wiki.guildwars2.com_images_f_fb_Crippled.png","stacking":false,"consumable":false,"enemy":false},"b791":{"id":791,"name":"Fear","icon":"/cache/https_wiki.guildwars2.com_images_e_e6_Fear.png","stacking":false,"consumable":false,"enemy":false},"b727":{"id":727,"name":"Immobile","icon":"/cache/https_wiki.guildwars2.com_images_3_32_Immobile.png","stacking":false,"consumable":false,"enemy":false},"b26766":{"id":26766,"name":"Slow","icon":"/cache/https_wiki.guildwars2.com_images_f_f5_Slow.png","stacking":false,"consumable":false,"enemy":false},"b742":{"id":742,"name":"Weakness","icon":"/cache/https_wiki.guildwars2.com_images_f_f9_Weakness.png","stacking":false,"consumable":false,"enemy":false},"b738":{"id":738,"name":"Vulnerability","icon":"/cache/https_wiki.guildwars2.com_images_a_af_Vulnerability.png","stacking":true,"consumable":false,"enemy":false},"b-3":{"id":-3,"name":"Number of Conditions","icon":"/cache/https_wiki.guildwars2.com_images_3_38_Condition_Duration.png","stacking":true,"consumable":false,"enemy":false}},"damageModMap":{"d1046688063":{"id":1046688063,"name":"Bolt to the Heart","icon":"/cache/https_wiki.guildwars2.com_images_f_f8_Bolt_to_the_Heart.png","tooltip":"Bolt to the Heart - 20% if target <50% HP<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d-163120218":{"id":-163120218,"name":"Aquamancer's Training","icon":"/cache/https_wiki.guildwars2.com_images_8_81_Aquamancer_27s_Training.png","tooltip":"Aquamancer's Training - 10% over 90% HP<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d-440792669":{"id":-440792669,"name":"Bountiful Power","icon":"/cache/https_wiki.guildwars2.com_images_7_75_Bountiful_Power.png","tooltip":"Bountiful Power - 2% per boon<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d677996733":{"id":677996733,"name":"Weaver's Prowess","icon":"/cache/https_wiki.guildwars2.com_images_7_75_Weaver_27s_Prowess.png","tooltip":"Weaver's Prowess - 10% cDam (8s) after switching element<br>No Minions<br>Condition Damage only<br>Compared against All Damage","nonMultiplier":false},"d1851654695":{"id":1851654695,"name":"Elements of Rage","icon":"/cache/https_wiki.guildwars2.com_images_a_a2_Elements_of_Rage.png","tooltip":"Elements of Rage - 10% (8s) after double attuning<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d-420782832":{"id":-420782832,"name":"Swift Revenge","icon":"/cache/https_wiki.guildwars2.com_images_9_94_Swift_Revenge.png","tooltip":"Swift Revenge - 7% under swiftness/superspeed<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d-1035102360":{"id":-1035102360,"name":"Burning Rage","icon":"/cache/https_wiki.guildwars2.com_images_b_bd_Burning_Rage.png","tooltip":"Burning Rage - 10% on burning target<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d500729987":{"id":500729987,"name":"Serrated Stones","icon":"/cache/https_wiki.guildwars2.com_images_6_60_Serrated_Stones.png","tooltip":"Serrated Stones - 5% to bleeding target<br>No Minions<br>Power Damage only<br>Compared against All Damage","nonMultiplier":false},"d-930281051":{"id":-930281051,"name":"Vulnerability","icon":"/cache/https_wiki.guildwars2.com_images_a_af_Vulnerability.png","tooltip":"Vulnerability - 1% per Stack<br>Actor + Minions<br>All Damage type<br>Compared against All Damage","nonMultiplier":false},"d791634706":{"id":791634706,"name":"Frost Spirit","icon":"/cache/https_wiki.guildwars2.com_images_thumb_c_c6_Frost_Spirit.png_33px-Frost_Spirit.png","tooltip":"Frost Spirit - 5%<br>No Minions<br>Power Damage only<br>Compared against All Damage<br>Non multiplier","nonMultiplier":true},"d-1339402349":{"id":-1339402349,"name":"Scholar Rune","icon":"/cache/https_wiki.guildwars2.com_images_2_2b_Superior_Rune_of_the_Scholar.png","tooltip":"Scholar Rune - 5% over 90% HP<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d-638064328":{"id":-638064328,"name":"Eagle Rune","icon":"/cache/https_wiki.guildwars2.com_images_9_9b_Superior_Rune_of_the_Eagle.png","tooltip":"Eagle Rune - 10% if target <50% HP<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d232999904":{"id":232999904,"name":"Thief Rune","icon":"/cache/https_wiki.guildwars2.com_images_9_96_Superior_Rune_of_the_Thief.png","tooltip":"Thief Rune - 10% while flanking<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d1256272418":{"id":1256272418,"name":"Strength Rune","icon":"/cache/https_wiki.guildwars2.com_images_2_2b_Superior_Rune_of_Strength.png","tooltip":"Strength Rune - 5% under might<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d1312109175":{"id":1312109175,"name":"Fire Rune","icon":"/cache/https_wiki.guildwars2.com_images_4_4a_Superior_Rune_of_the_Fire.png","tooltip":"Fire Rune - 10% under fire aura<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d-1874375611":{"id":-1874375611,"name":"Flame Legion Rune","icon":"/cache/https_wiki.guildwars2.com_images_4_4a_Superior_Rune_of_the_Flame_Legion.png","tooltip":"Flame Legion Rune - 7% on burning target<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d562484599":{"id":562484599,"name":"Spellbreaker Rune","icon":"/cache/https_wiki.guildwars2.com_images_1_1a_Superior_Rune_of_the_Spellbreaker.png","tooltip":"Spellbreaker Rune - 7% on boonless target<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d-988732892":{"id":-988732892,"name":"Ice Rune","icon":"/cache/https_wiki.guildwars2.com_images_7_78_Superior_Rune_of_the_Ice.png","tooltip":"Ice Rune - 7% on chilled target<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false},"d1216166252":{"id":1216166252,"name":"Rage Rune","icon":"/cache/https_wiki.guildwars2.com_images_9_9e_Superior_Rune_of_Rage.png","tooltip":"Rage Rune - 5% under fury<br>No Minions<br>Power Damage only<br>Compared against Power Damage","nonMultiplier":false}},"mechanicMap":[],"encounterDuration":"01m 40s 847ms","success":true,"wvw":false,"fightName":"Standard Kitty Golem","fightIcon":"/cache/https_wiki.guildwars2.com_images_8_8f_Mini_Professor_Mew.png","lightTheme":false,"noMechanics":true,"singleGroup":true};
    </script>
<script>
        var graphData = {"phases":[{"players":[{"targets":[[0,16125,39142,68232,112594,149951,196248,242455,287259,337966,390626,437629,488589,534087,583945,642213,704720,757531,806841,856425,899812,940080,979727,1025276,1062286,1099275,1139372,1182373,1224066,1265248,1301971,1337393,1368673,1399614,1432075,1458122,1498935,1535350,1574453,1607706,1655892,1696952,1733168,1773970,1814166,1854060,1885993,1922191,1954083,1982590,2010645,2039075,2069272,2098712,2134961,2172083,2203544,2232298,2268058,2306655,2338948,2371058,2414318,2445411,2481756,2520981,2564011,2607067,2648026,2681579,2713152,2745491,2767617,2794455,2818105,2847558,2893603,2934434,2976385,3018191,3062622,3102279,3152572,3206675,3257028,3304570,3349025,3398408,3439489,3476273,3511848,3550787,3588409,3633945,3685375,3729056,3770175,3817511,3859102,3907642,3950837,3995887]],"total":[0,16125,39142,68232,112594,149951,196248,242455,287259,337966,390626,437629,488589,534087,583945,642213,704720,757531,806841,856425,899812,940080,979727,1025276,1062286,1099275,1139372,1182373,1224066,1265248,1301971,1337393,1368673,1399614,1432075,1458122,1498935,1535350,1574453,1607706,1655892,1696952,1733168,1773970,1814166,1854060,1885993,1922191,1954083,1982590,2010645,2039075,2069272,2098712,2134961,2172083,2203544,2232298,2268058,2306655,2338948,2371058,2414318,2445411,2481756,2520981,2564011,2607067,2648026,2681579,2713152,2745491,2767617,2794455,2818105,2847558,2893603,2934434,2976385,3018191,3062622,3102279,3152572,3206675,3257028,3304570,3349025,3398408,3439489,3476273,3511848,3550787,3588409,3633945,3685375,3729056,3770175,3817511,3859102,3907642,3950837,3995887]}],"targets":[{"total":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"health":[100.0,99.58,99.15,98.56,97.61,96.83,95.76,94.67,93.49,92.33,91.05,89.85,88.59,87.27,86.07,84.78,83.47,81.88,80.52,79.3,78.1,76.89,75.93,74.85,73.81,72.92,71.91,70.81,69.81,68.73,67.74,66.76,65.98,65.21,64.38,63.6,62.89,61.89,60.93,60.03,58.88,57.84,56.92,55.85,54.86,53.76,52.85,51.95,51.19,50.45,49.66,48.94,48.25,47.45,46.62,45.71,44.87,44.1,43.22,42.27,41.46,40.66,39.65,38.8,37.86,36.94,35.99,34.81,33.76,32.87,31.99,31.09,30.46,29.78,29.2,28.55,27.63,26.72,25.63,24.58,23.51,22.46,21.24,20.02,18.69,17.46,16.34,15.08,13.91,12.12,11.25,10.28,9.3,8.19,6.89,5.76,4.72,3.6,2.48,1.34,0.19,0.06]}],"targetsHealthForCR":[[100.0,99.58,99.15,98.56,97.61,96.83,95.76,94.67,93.49,92.33,91.05,89.85,88.59,87.27,86.07,84.78,83.47,81.88,80.52,79.3,78.1,76.89,75.93,74.85,73.81,72.92,71.91,70.81,69.81,68.73,67.74,66.76,65.98,65.21,64.38,63.6,62.89,61.89,60.93,60.03,58.88,57.84,56.92,55.85,54.86,53.76,52.85,51.95,51.19,50.45,49.66,48.94,48.25,47.45,46.62,45.71,44.87,44.1,43.22,42.27,41.46,40.66,39.65,38.8,37.86,36.94,35.99,34.81,33.76,32.87,31.99,31.09,30.46,29.78,29.2,28.55,27.63,26.72,25.63,24.58,23.51,22.46,21.24,20.02,18.69,17.46,16.34,15.08,13.91,12.12,11.25,10.28,9.3,8.19,6.89,5.76,4.72,3.6,2.48,1.34,0.19,0.06]]}],"mechanics":[]};
    </script>
<script>
/*jshint esversion: 6 */
"use strict";
$.extend($.fn.dataTable.defaults, {
    searching: false,
    ordering: true,
    paging: false,
    retrieve: true,
    dom: "t"
});

// polyfill for string include
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
if (!String.prototype.includes) {
    Object.defineProperty(String.prototype, "includes", {
        value: function (search, start) {
            if (typeof start !== 'number') {
                start = 0;
            }
            if (start + search.length > this.length) {
                return false;
            } else {
                return this.indexOf(search, start) !== -1;
            }
        }
    });
}

/*var lazyTableUpdater = null;
if ('IntersectionObserver' in window) {
    lazyTableUpdater = new IntersectionObserver(function (entries, observer) {
        entries.forEach(function (entry) {
            if (entry.isIntersecting) {
                var id = entry.target.id;
                var table = $("#" + id);
                if ($.fn.dataTable.isDataTable(table)) {
                    table.DataTable().rows().invalidate('dom').draw();
                }
                observer.unobserve(entry.target);
            }
        });
    });
}*/
var themes = {
    "yeti": "https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/yeti/bootstrap.min.css",
    "slate": "https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.1.1/slate/bootstrap.min.css"
};

var urls = {
    Warrior: "/cache/https_wiki.guildwars2.com_images_4_43_Warrior_tango_icon_20px.png",
    Berserker: "/cache/https_wiki.guildwars2.com_images_d_da_Berserker_tango_icon_20px.png",
    Spellbreaker: "/cache/https_wiki.guildwars2.com_images_e_ed_Spellbreaker_tango_icon_20px.png",
    Guardian: "/cache/https_wiki.guildwars2.com_images_8_8c_Guardian_tango_icon_20px.png",
    Dragonhunter: "/cache/https_wiki.guildwars2.com_images_c_c9_Dragonhunter_tango_icon_20px.png",
    DragonHunter: "/cache/https_wiki.guildwars2.com_images_c_c9_Dragonhunter_tango_icon_20px.png",
    Firebrand: "/cache/https_wiki.guildwars2.com_images_0_02_Firebrand_tango_icon_20px.png",
    Revenant: "/cache/https_wiki.guildwars2.com_images_b_b5_Revenant_tango_icon_20px.png",
    Herald: "/cache/https_wiki.guildwars2.com_images_6_67_Herald_tango_icon_20px.png",
    Renegade: "/cache/https_wiki.guildwars2.com_images_7_7c_Renegade_tango_icon_20px.png",
    Engineer: "/cache/https_wiki.guildwars2.com_images_2_27_Engineer_tango_icon_20px.png",
    Scrapper: "/cache/https_wiki.guildwars2.com_images_3_3a_Scrapper_tango_icon_200px.png",
    Holosmith: "/cache/https_wiki.guildwars2.com_images_2_28_Holosmith_tango_icon_20px.png",
    Ranger: "/cache/https_wiki.guildwars2.com_images_4_43_Ranger_tango_icon_20px.png",
    Druid: "/cache/https_wiki.guildwars2.com_images_d_d2_Druid_tango_icon_20px.png",
    Soulbeast: "/cache/https_wiki.guildwars2.com_images_7_7c_Soulbeast_tango_icon_20px.png",
    Thief: "/cache/https_wiki.guildwars2.com_images_7_7a_Thief_tango_icon_20px.png",
    Daredevil: "/cache/https_wiki.guildwars2.com_images_e_e1_Daredevil_tango_icon_20px.png",
    Deadeye: "/cache/https_wiki.guildwars2.com_images_c_c9_Deadeye_tango_icon_20px.png",
    Elementalist: "/cache/https_wiki.guildwars2.com_images_a_aa_Elementalist_tango_icon_20px.png",
    Tempest: "/cache/https_wiki.guildwars2.com_images_4_4a_Tempest_tango_icon_20px.png",
    Weaver: "/cache/https_wiki.guildwars2.com_images_f_fc_Weaver_tango_icon_20px.png",
    Mesmer: "/cache/https_wiki.guildwars2.com_images_6_60_Mesmer_tango_icon_20px.png",
    Chronomancer: "/cache/https_wiki.guildwars2.com_images_f_f4_Chronomancer_tango_icon_20px.png",
    Mirage: "/cache/https_wiki.guildwars2.com_images_d_df_Mirage_tango_icon_20px.png",
    Necromancer: "/cache/https_wiki.guildwars2.com_images_4_43_Necromancer_tango_icon_20px.png",
    Reaper: "/cache/https_wiki.guildwars2.com_images_1_11_Reaper_tango_icon_20px.png",
    Scourge: "/cache/https_wiki.guildwars2.com_images_0_06_Scourge_tango_icon_20px.png",

    Unknown: "/cache/https_wiki.guildwars2.com_images_thumb_d_de_Sword_slot.png_40px-Sword_slot.png",
    Sword: "/cache/https_wiki.guildwars2.com_images_0_07_Crimson_Antique_Blade.png",
    Axe: "/cache/https_wiki.guildwars2.com_images_d_d4_Crimson_Antique_Reaver.png",
    Dagger: "/cache/https_wiki.guildwars2.com_images_6_65_Crimson_Antique_Razor.png",
    Mace: "/cache/https_wiki.guildwars2.com_images_6_6d_Crimson_Antique_Flanged_Mace.png",
    Pistol: "/cache/https_wiki.guildwars2.com_images_4_46_Crimson_Antique_Revolver.png",
    Scepter: "/cache/https_wiki.guildwars2.com_images_e_e2_Crimson_Antique_Wand.png",
    Focus: "/cache/https_wiki.guildwars2.com_images_8_87_Crimson_Antique_Artifact.png",
    Shield: "/cache/https_wiki.guildwars2.com_images_b_b0_Crimson_Antique_Bastion.png",
    Torch: "/cache/https_wiki.guildwars2.com_images_7_76_Crimson_Antique_Brazier.png",
    Warhorn: "/cache/https_wiki.guildwars2.com_images_1_1c_Crimson_Antique_Herald.png",
    Greatsword: "/cache/https_wiki.guildwars2.com_images_5_50_Crimson_Antique_Claymore.png",
    Hammer: "/cache/https_wiki.guildwars2.com_images_3_38_Crimson_Antique_Warhammer.png",
    Longbow: "/cache/https_wiki.guildwars2.com_images_f_f0_Crimson_Antique_Greatbow.png",
    Shortbow: "/cache/https_wiki.guildwars2.com_images_1_17_Crimson_Antique_Short_Bow.png",
    Rifle: "/cache/https_wiki.guildwars2.com_images_1_19_Crimson_Antique_Musket.png",
    Staff: "/cache/https_wiki.guildwars2.com_images_5_5f_Crimson_Antique_Spire.png",
    Trident: "/cache/https_wiki.guildwars2.com_images_9_98_Crimson_Antique_Trident.png",
    Speargun: "/cache/https_wiki.guildwars2.com_images_3_3b_Crimson_Antique_Harpoon_Gun.png",
    Spear: "/cache/https_wiki.guildwars2.com_images_c_cb_Crimson_Antique_Impaler.png"
};

const specs = [
    "Warrior", "Berserker", "Spellbreaker", "Revenant", "Herald", "Renegade", "Guardian", "Dragonhunter", "Firebrand",
    "Ranger", "Druid", "Soulbeast", "Engineer", "Scrapper", "Holosmith", "Thief", "Daredevil", "Deadeye",
    "Mesmer", "Chronomancer", "Mirage", "Necromancer", "Reaper", "Scourge", "Elementalist", "Tempest", "Weaver"
];

const specToBase = {
    Warrior: 'Warrior',
    Berserker: 'Warrior',
    Spellbreaker: 'Warrior',
    Revenant: "Revenant",
    Herald: "Revenant",
    Renegade: "Revenant",
    Guardian: "Guardian",
    Dragonhunter: "Guardian",
    Firebrand: "Guardian",
    Ranger: "Ranger",
    Druid: "Ranger",
    Soulbeast: "Ranger",
    Engineer: "Engineer",
    Scrapper: "Engineer",
    Holosmith: "Engineer",
    Thief: "Thief",
    Daredevil: "Thief",
    Deadeye: "Thief",
    Mesmer: "Mesmer",
    Chronomancer: "Mesmer",
    Mirage: "Mesmer",
    Necromancer: "Necromancer",
    Reaper: "Necromancer",
    Scourge: "Necromancer",
    Elementalist: "Elementalist",
    Tempest: "Elementalist",
    Weaver: "Elementalist"
};

function buildFallBackURL(skill) {
    if (!skill.icon || skill.fallBack) {
        return;
    }
    var apiIcon = skill.icon;
    if (!apiIcon.includes("render")) {
        return;
    }
    var splitIcon = apiIcon.split('/');
    var signature = splitIcon[splitIcon.length - 2];
    var id = splitIcon[splitIcon.length - 1].split('.')[0] + "-64px.png";
    skill.icon = "https://darthmaim-cdn.de/gw2treasures/icons/" + signature + "/" + id;
    skill.fallBack = true;
}

function findSkill(isBuff, id) {
    var skill;
    if (isBuff) {
        skill = logData.buffMap['b' + id] || {};
        skill.condi = true;
    } else {
        skill = logData.skillMap["s" + id] || {};
    }
    if (!apiRenderServiceOkay) {
        buildFallBackURL(skill);
    }
    return skill;
}

function getTargetCacheID(activetargets) {
    var id = 0;
    for (var i = 0; i < activetargets.length; i++) {
        id = id | Math.pow(2,activetargets[i]);
    }
    return id;
}

function computeRotationData(rotationData, images, data) {
    if (rotationData) {
        var rotaTrace = {
            x: [],
            base: [],
            y: [],
            name: 'Rotation',
            text: [],
            orientation: 'h',
            mode: 'markers',
            type: 'bar',
            width: [],
            hoverinfo: 'text',
            hoverlabel: {
                namelength: '-1'
            },
            marker: {
                color: [],
                width: '5',
                line: {
                    color: [],
                    width: '2'
                }
            },
            showlegend: false
        }
        for (var i = 0; i < rotationData.length; i++) {
            var item = rotationData[i];
            var x = item[0];
            var skillId = item[1];
            var duration = item[2];
            var endType = item[3];
            var quick = item[4];
            var skill = findSkill(false, skillId);
            var aa = false;
            var icon;
            var name = '???';
            if (skill) {
                aa = skill.aa;
                icon = skill.icon;
                name = skill.name;
            }

            if (!icon.includes("render") && !icon.includes("darthmaim")) {
                icon = null;
            }

            if (!aa && icon) {
                images.push({
                    source: icon,
                    xref: 'x',
                    yref: 'y',
                    x: x,
                    y: 0.0,
                    sizex: 1.1,
                    sizey: 1.1,
                    xanchor: 'middle',
                    yanchor: 'bottom'
                });
            }

            var fillColor;
            if (endType == 1) fillColor = 'rgb(40,40,220)';
            else if (endType == 2) fillColor = 'rgb(220,40,40)';
            else if (endType == 3) fillColor = 'rgb(40,220,40)';
            else fillColor = 'rgb(220,220,0)';

            rotaTrace.x.push(duration / 1000.0);
            rotaTrace.base.push(x);
            rotaTrace.y.push(1.2);
            rotaTrace.text.push(name + ' at ' + x + 's for ' + duration + 'ms');
            rotaTrace.width.push(aa ? 0.5 : 1.0);
            rotaTrace.marker.color.push(fillColor);
            rotaTrace.marker.line.color.push(quick ? 'rgb(220,40,220)' : 'rgb(20,20,20)');
        }
        data.push(rotaTrace);
        return 1;
    }
    return 0;
}

function computePhaseMarkupSettings(currentArea, areas, annotations) {
    var y = 1;
    var textbg = '#0000FF';
    var x = (currentArea.end + currentArea.start) / 2;
    for (var i = annotations.length - 1; i >= 0; i--) {
        var annotation = annotations[i];
        var area = areas[i];
        if ((area.start <= currentArea.start && area.end >= currentArea.end) || area.end >= currentArea.start - 2) {
            // current area included in area OR current area intersects area
            if (annotation.bgcolor === textbg) {
                textbg = '#FF0000';
            }
            y = annotation.y === y && area.end > currentArea.start ? 1.09 : y;
            break;
        }
    }
    return {
        y: y,
        x: x,
        textbg: textbg
    };
}

function computePhaseMarkups(shapes, annotations, phase, linecolor) {
    if (phase.markupAreas) {
        for (var i = 0; i < phase.markupAreas.length; i++) {
            var area = phase.markupAreas[i];
            var setting = computePhaseMarkupSettings(area, phase.markupAreas, annotations);
            annotations.push({
                x: setting.x,
                y: setting.y,
                xref: 'x',
                yref: 'paper',
                xanchor: 'center',
                yanchor: 'bottom',
                text: area.label + '<br>' + '(' + Math.round(1000 * (area.end - area.start)) / 1000 + ' s)',
                font: {
                    color: '#ffffff'
                },
                showarrow: false,
                bordercolor: '#A0A0A0',
                borderwidth: 2,
                bgcolor: setting.textbg,
                opacity: 0.8
            });
            if (area.highlight) {
                shapes.push({
                    type: 'rect',
                    xref: 'x',
                    yref: 'paper',
                    x0: area.start,
                    y0: 0,
                    x1: area.end,
                    y1: 1,
                    fillcolor: setting.textbg,
                    opacity: 0.2,
                    line: {
                        width: 0
                    },
                    layer: 'below'
                });
            }
        }
    }
    if (phase.markupLines) {
        for (var i = 0; i < phase.markupLines.length; i++) {
            var x = phase.markupLines[i];
            shapes.push({
                type: 'line',
                xref: 'x',
                yref: 'paper',
                x0: x,
                y0: 0,
                x1: x,
                y1: 1,
                line: {
                    color: linecolor,
                    width: 2,
                    dash: 'dash'
                },
                opacity: 0.6,
            });
        }
    }
}


function computePlayerDPS(player, damageData, lim, phasebreaks, activetargets, cacheID, lastTime) {
    if (player.dpsGraphCache.has(cacheID)) {
        return player.dpsGraphCache.get(cacheID);
    }
    var totalDamage = 0;
    var targetDamage = 0;
    var totalDPS = [0];
    var cleaveDPS = [0];
    var targetDPS = [0];
    var totalTotalDamage = [0];
    var totalCleaveDamage = [0];
    var totalTargetDamage = [0];
    var maxDPS = {
        total: 0,
        cleave: 0,
        target: 0
    };
    var end = damageData.total.length;
    if (lastTime > 0) {
        end--;
    }
    var j, limID = 0, targetid, k;
    for (j = 1; j < end; j++) {
        if (lim > 0) {
            limID = Math.max(j - lim, 0);
        } else if (phasebreaks && phasebreaks[j-1]) {
            limID = j;
        }
        var div = Math.max(j - limID, 1);
        totalDamage = damageData.total[j] - damageData.total[limID];
        targetDamage = 0;
        for (k = 0; k < activetargets.length; k++) {
            targetid = activetargets[k];
            targetDamage += damageData.targets[targetid][j] - damageData.targets[targetid][limID];
        }
        totalDPS[j] = Math.round(totalDamage / div);
        targetDPS[j] = Math.round(targetDamage / div);
        cleaveDPS[j] = Math.round((totalDamage - targetDamage) / div);
        totalTotalDamage[j] = totalDamage;
        totalTargetDamage[j] = targetDamage;
        totalCleaveDamage[j] = (totalDamage - targetDamage);
        maxDPS.total = Math.max(maxDPS.total, totalDPS[j]);
        maxDPS.target = Math.max(maxDPS.target, targetDPS[j]);
        maxDPS.cleave = Math.max(maxDPS.cleave, cleaveDPS[j]);
    }
    // last point management
    if (lastTime > 0) {
        if (lim > 0) {
            limID = Math.round(Math.max(lastTime - lim, 0));
        } else if (phasebreaks && phasebreaks[j-1]) {
            limID = j;
        }
        totalDamage = damageData.total[j] - damageData.total[limID];
        targetDamage = 0;
        for (k = 0; k < activetargets.length; k++) {
            targetid = activetargets[k];
            targetDamage += damageData.targets[targetid][j] - damageData.targets[targetid][limID];
        }
        totalDPS[j] = Math.round(totalDamage / (lastTime - limID));
        targetDPS[j] = Math.round(targetDamage / (lastTime - limID));
        cleaveDPS[j] = Math.round((totalDamage - targetDamage) / (lastTime - limID));
        totalTotalDamage[j] = totalDamage;
        totalTargetDamage[j] = targetDamage;
        totalCleaveDamage[j] = (totalDamage - targetDamage);
        maxDPS.total = Math.max(maxDPS.total, totalDPS[j]);
        maxDPS.target = Math.max(maxDPS.target, targetDPS[j]);
        maxDPS.cleave = Math.max(maxDPS.cleave, cleaveDPS[j]);
    }
    if (maxDPS.total < 1e-6) {
        maxDPS.total = 10;
    }
    if (maxDPS.target < 1e-6) {
        maxDPS.target = 10;
    }
    if (maxDPS.cleave < 1e-6) {
        maxDPS.cleave = 10;
    }
    var res = {
        dps: {
            total: totalDPS,
            target: targetDPS,
            cleave: cleaveDPS
        },
        total: {
            total: totalTotalDamage,
            target: totalTargetDamage,
            cleave: totalCleaveDamage
        },
        maxDPS: maxDPS
    };
    player.dpsGraphCache.set(cacheID, res);
    return res;
}

function getActorGraphLayout(images, color) {
    return {
        barmode: 'stack',
        yaxis: {
            title: 'Rotation',
            domain: [0, 0.09],
            fixedrange: true,
            showgrid: false,
            showticklabels: false,
            color: color,
            range: [0, 2]
        },
        legend: {
            traceorder: 'reversed'
        },
        hovermode: 'compare',
        hoverdistance: 1100,
        yaxis2: {
            title: 'Buffs',
            domain: [0.11, 0.6],
            color: color,
            gridcolor: color,
            fixedrange: true
        },
        yaxis3: {
            title: 'DPS',
            color: color,
            gridcolor: color,
            domain: [0.61, 1]
        },
        images: images,
        font: {
            color: color
        },
        xaxis: {
            title: 'Time(sec)',
            color: color,
            gridcolor: color,
            xrangeslider: {}
        },
        paper_bgcolor: 'rgba(0,0,0,0)',
        plot_bgcolor: 'rgba(0,0,0,0)',
        shapes: [],
        annotations: [],
        autosize: true,
        width: 1100,
        height: 800,
        datarevision: new Date().getTime(),
    };
}

function computeTargetHealthData(graph, targets, phase, data, yaxis, times) {
    for (var i = 0; i < graph.targets.length; i++) {
        var health = graph.targets[i].health;
        var hpTexts = [];
        var target = targets[phase.targets[i]];
        for (var j = 0; j < health.length; j++) {
            hpTexts[j] = health[j] + "% hp - " + target.name ;
        }
        var res = {
            x: times,
            text: hpTexts,
            mode: 'lines',
            line: {
                shape: 'spline',
                dash: 'dashdot'
            },
            hoverinfo: 'text+x',
            name: target.name + ' health',
        };
        if (yaxis) {
            res.yaxis = yaxis;
        }
        data.push(res);
    }
    return graph.targets.length;
}

function computeBuffData(buffData, data) {
    if (buffData) {
        for (var i = 0; i < buffData.length; i++) {
            var boonItem = buffData[i];
            var boon = findSkill(true, boonItem.id);
            var line = {
                x: [],
                y: [],
                text: [],
                yaxis: 'y2',
                type: 'scatter',
                visible: boonItem.visible ? null : 'legendonly',
                line: {
                    color: boonItem.color,
                    shape: 'linear'
                },
                hoverinfo: 'text+x',
                fill: 'tozeroy',
                name: boon.name.substring(0,20)
            };
            line.x.push(boonItem.states[0][0]);
            line.y.push(boonItem.states[0][1]);
            line.text.push(boon.name + ': ' + boonItem.states[0][1]);
            for (var p = 1; p < boonItem.states.length; p++) {
                line.x.push(boonItem.states[p][0]-0.001);
                line.y.push(boonItem.states[p-1][1]);
                line.text.push(boon.name + ': ' + boonItem.states[p-1][1]);
                line.x.push(boonItem.states[p][0]);
                line.y.push(boonItem.states[p][1]);
                line.text.push(boon.name + ': ' + boonItem.states[p][1]);
            }
            data.push(line);
        }
        return buffData.length;
    }
    return 0;
}

var initTable = function (id, cell, order, orderCallBack) {
    var table = $(id);
    if (!table.length) {
        return;
    }
    /*if (lazyTableUpdater) {
        var lazyTable = document.querySelector(id);
        var lazyTableObserver = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
                if (entry.isIntersecting) {
                    table.DataTable({
                        order: [
                            [cell, order]
                        ]
                    });
                    if (orderCallBack) {
                        table.DataTable().on('order.dt', orderCallBack);
                    }
                    observer.unobserve(entry.target);
                }
            });
        });
        lazyTableObserver.observe(lazyTable);
    } else {*/
    table.DataTable({
        order: [
            [cell, order]
        ]
    });
    if (orderCallBack) {
        table.DataTable().on('order.dt', orderCallBack);
    }
    //}
};

var updateTable = function (id) {
    /*if (lazyTableUpdater) {
        var lazyTable = document.querySelector(id);
        lazyTableUpdater.unobserve(lazyTable);
        lazyTableUpdater.observe(lazyTable);
    } else {*/
    var table = $(id);
    if ($.fn.dataTable.isDataTable(id)) {
        table.DataTable().rows().invalidate('dom');
        table.DataTable().draw();
    }
    //}
};

var DataTypes = {
    damageTable: 0,
    defTable: 1,
    supTable: 2,
    gameplayTable: 3,
    mechanicTable: 4,
    boonTable: 5,
    offensiveBuffTable: 6,
    defensiveBuffTable: 7,
    personalBuffTable: 8,
    playerTab: 9,
    targetTab: 10,
    dpsGraph: 11,
    dmgModifiersTable: 12,
};

/*function getActorGraphLayout(images, boonYs, stackingBoons) {
    var layout = {
        barmode: 'stack',
        yaxis: {
            title: 'Rotation',
            domain: [0, 0.1],
            fixedrange: true,
            showgrid: false,
            showticklabels: false,
            color: '#cccccc',
            range: [0, 2]
        },
        legend: {
            traceorder: 'reversed'
        },
        hovermode: 'compare',
        images: images,
        font: {
            color: '#cccccc'
        },
        xaxis: {
            title: 'Time(sec)',
            color: '#cccccc',
            gridcolor: '#cccccc',
            xrangeslider: {}
        },
        paper_bgcolor: 'rgba(0,0,0,0)',
        plot_bgcolor: 'rgba(0,0,0,0)',
        shapes: [],
        annotations: [],
        autosize: true,
        width: 1100,
        height: 1100,
        datarevision: new Date().getTime(),
    };
    layout['yaxis' + (2 + boonYs)] = {
        title: 'DPS',
        color: '#cccccc',
        gridcolor: '#cccccc',
        domain: [0.75, 1]
    };
    var perBoon = 0.65 / boonYs;
    var singleBuffs = boonYs;
    if (stackingBoons) {
        layout['yaxis' + (2 + boonYs - 1)] = {
            title: 'Stacking Buffs',
            color: '#cccccc',
            gridcolor: '#cccccc',
            domain: [0.70, 0.75]
        };
        perBoon = 0.6 / (boonYs - 1);
        singleBuffs--;
    }
    for (var i = 0; i < singleBuffs; i++) {
        layout['yaxis' + (2 + i)] = {
            title: '',
            color: '#cccccc',
            showgrid: false,
            showticklabels: false,
            domain: [0.1 + i * perBoon, 0.1 + (i + 1) * perBoon]
        };
    }
    return layout;
}*/

/*
function computeBuffData(buffData, data) {
    var ystart = 0;
    if (buffData) {
        var stackings = [];
        var i;
        for (i = buffData.length - 1; i >= 0; i--) {
            var boonItem = buffData[i];
            var boon = findSkill(true, boonItem.id);
            var line = {
                x: [],
                y: [],
                yaxis: boon.stacking ? 'stacking' : 'y' + (2 + ystart++),
                type: 'scatter',
                visible: boonItem.visible || !boon.stacking ? null : 'legendonly',
                line: {
                    color: boonItem.color,
                    shape: 'hv'
                },
                fill: boon.stacking ? 'tozeroy' : 'toself',
                name: boon.name,
                showlegend: boon.stacking ? true : false,
            };
            for (var p = 0; p < boonItem.states.length; p++) {
                line.x[p] = boonItem.states[p][0];
                line.y[p] = boonItem.states[p][1];
            }
            if (boon.stacking) {
                stackings.push(line);
            }
            data.push(line);
        }
        if (stackings.length) {
            var axis = 'y' + (2 + ystart++);
            for (i = 0; i < stackings.length; i++) {
                stackings[i].yaxis = axis;
            }
        }
        return {
            actorOffset: buffData.length,
            y: ystart,
            stacking: stackings.length > 0
        };
    }
    return {
        actorOffset: 0,
        y: 0,
        stacking: false
    };
}*//*jshint esversion: 6 */

var roundingComponent = {
    methods: {
        round: function (value) {
            if (isNaN(value)) {
                return 0;
            }
            return Math.round(value);
        },
        round2: function (value) {
            if (isNaN(value)) {
                return 0;
            }
            var mul = 100;
            return Math.round(mul * value) / mul;
        },
        round3: function (value) {
            if (isNaN(value)) {
                return 0;
            }
            var mul = 1000;
            return Math.round(mul * value) / mul;
        }
    }
};

var compileCommons = function () {
    Vue.component('rotation-legend-component', {
        template: `<div class="card">    <div class="card-body container">        <p><u>Fill</u></p>        <span style="padding: 2px; background-color:#0000FF; border-style:solid; border-width: 1px; border-color:#000000; color:#FFFFFF">Hit            without aftercast</span>        <span style="padding: 2px; background-color:#00FF00; border-style:solid; border-width: 1px; border-color:#000000; color:#000000">Hit            with full aftercast</span>        <span style="padding: 2px; background-color:#FF0000; border-style:solid; border-width: 1px; border-color:#000000; color:#FFFFFF">Attack            canceled before completing</span>        <span style="padding: 2px; background-color:#FFFF00; border-style:solid; border-width: 1px; border-color:#000000; color:#000000">Unknown            state</span>        <p class="mt-2"><u>Outline</u></p>        <span style="padding: 2px; background-color:#999999; border-style:solid; border-width: 2px; border-color:#000000; color:#000000">Normal            animation length</span>        <span style="padding: 2px; background-color:#999999; border-style:solid; border-width: 2px; border-color:#FF00FF; color:#000000">Animation            with quickness</span>    </div></div>`
    });
    
    Vue.component('target-data-component', {
        props: ['targetid'],
        template: `<div class="d-flex flex-row justify-content-center align-items-center mb-2">    <img v-if="target.health > 0" src="/cache/https_wiki.guildwars2.com_images_b_be_Vitality.png" alt="Health" class="icon"        :data-original-title="'Health: ' + target.health">    <img v-if="target.tough > 0" src="/cache/https_wiki.guildwars2.com_images_1_12_Toughness.png" alt="Toughness" class="icon"        hbHeight :data-original-title="'Toughness: ' + target.tough">    <img v-if="target.hbWidth > 0" src="/cache/https_wiki.guildwars2.com_images_e_e7_1863930.png" alt="Hitbox Width" class="icon"        :data-original-title="'Hitbox Width: ' + target.hbWidth">    <img v-if="target.hbHeight > 0" src="/cache/https_wiki.guildwars2.com_images_5_57_1863934.png" alt="Hitbox Height" class="icon"        :data-original-title="'Hitbox Height: ' + target.hbHeight"></div>`,
        computed: {
            target: function() {
                return logData.targets[this.targetid];
            }
        }
    });

    Vue.component('dmgtaken-component', {
        props: ['actor', 'tableid',
            'phaseindex'
        ],
        template: `<damagedist-table-component :dmgdist="dmgtaken" :tableid="tableid" :actor="null" :isminion="false"    :istarget="false" :phaseindex="phaseindex"></damagedist-table-component>`,
        computed: {
            dmgtaken: function () {
                return this.actor.details.dmgDistributionsTaken[this.phaseindex];
            }
        },
    });

    Vue.component("graph-component", {
        props: ['id', 'layout', 'data'],
        template: '<div :id="id" class="d-flex flex-row justify-content-center"></div>',
        mounted: function () {
            var div = document.querySelector(this.queryID);
            Plotly.react(div, this.data, this.layout, {showSendToCloud: true});
            var _this = this;
            div.on('plotly_animated', function () {
                Plotly.relayout(div, _this.layout);
            });
        },
        computed: {
            queryID: function () {
                return "#" + this.id;
            }
        },
        watch: {
            layout: {
                handler: function () {
                    var div = document.querySelector(this.queryID);
                    var duration = 1000;
                    Plotly.animate(div, {
                        data: this.data
                    }, {
                        transition: {
                            duration: duration,
                            easing: 'cubic-in-out'
                        },
                        frame: {
                            duration: 1.5 * duration
                        }
                    });
                },
                deep: true
            }
        }
    });
    Vue.component("buff-table-component", {
        props: ["buffs", "playerdata", "generation", "condition", "sums", "id", "playerindex"],
        template: `<div v-if="buffs.length > 0">    <img v-if="generation" class="mb-1 icon" src="https://i.imgur.com/nSYuby8.png" :data-original-title="tooltipExpl"/>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="id">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th>Name</th>                <th v-for="buff in buffs" :data-original-title="buff.name">                    <img :src="buff.icon" :alt="buff.name" class="icon icon-hover">                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in playerdata" :class="{active: row.player.group && row.player.id === playerindex}">                <td>{{ row.player.group ? row.player.group : '-' }}</td>                <td :data-original-title="row.player.profession ? row.player.profession : row.player.name">                    <img :src="row.player.icon" :alt="row.player.profession ? row.player.profession : row.player.name"                        class="icon">                    <span style="display:none">                        {{ row.player.profession ? row.player.profession : row.player.name}}                    </span>                </td>                <td class="text-left" :data-original-title="getAvgTooltip(row.data.avg)">                    {{ row.player.name }}                </td>                <td v-for=" (buff, index) in buffs" :data-original-title="getCellTooltip(buff, row.data.data[index])">                    {{ getCellValue(buff, row.data.data[index]) }}                </td>            </tr>        </tbody>        <tfoot v-show="sums.length > 0">            <tr v-for="sum in sums">                <td></td>                <td v-if="sum.icon" :data-original-title="sum.name"><img :src="sum.icon" :alt="sum.name" class="icon"></td>                <td v-else></td>                <td class="text-left" :data-original-title="getAvgTooltip(sum.avg)">{{sum.name}}</td>                <td v-for=" (buff, index) in buffs" :data-original-title="getCellTooltip(buff, sum.data[index], !!sum.icon)">                    {{ getCellValue(buff, sum.data[index]) }}                </td>            </tr>        </tfoot>    </table></div>`,
        methods: {
            getAvgTooltip: function (avg) {
                if (avg) {
                    return (
                        "Average number of " +
                        (this.condition ? "conditions: " : "boons: ") +
                        avg
                    );
                }
                return false;
            },
            getCellTooltip: function (buff, val, uptime) {
                if (val instanceof Array) {
                    if (!uptime && this.generation && (val[1] > 0 || val[2] > 0 || val[3] > 0 || val[4] > 0)) {
                        var res = (val[1] || 0) + (buff.stacking ? "" : "%") + " with overstack";
                        if (val[4] > 0) {
                            res += "<br>";
                            res += val[4] + (buff.stacking ? "" : "%") + " by extension";
                        }
                        if (val[2] > 0) {
                            res += "<br>";
                            res += val[2] + (buff.stacking ? "" : "%") + " wasted";
                        }
                        if (val[5] > 0) {
                            res += "<br>";
                            res += val[5] + (buff.stacking ? "" : "%") + " extended";
                        }
                        if (val[3] > 0) {
                            res += "<br>";
                            res += val[3] + (buff.stacking ? "" : "%") + " extended by unknown source";
                        }
                        return res;
                    } else if (buff.stacking && val[1] > 0) {
                        return "Uptime: " + val[1] + "%";
                    } else {
                        return false;
                    }
                }
                return false;
            },
            getCellValue: function (buff, val) {
                var value = val;
                var force = false;
                if (val instanceof Array) {
                    value = val[0];
                    force = this.generation && (val[1] > 0 || val[2] > 0 ||val[3] > 0 || val[4] > 0);
                }
                if (value > 0 || force) {
                    return buff.stacking ? value : value + "%";
                }
                return "-";
            }
        },
        computed: {
            tooltipExpl: function () {
                return `<ul>
                        <li>The value shown in the row is "generation + extensions you are the source"</li>
                        <li>With overstack is "generation + extensions you are the source + stacks that couldn't make into the queue/stacks"</li>
                        <li>By extension is "extensions you are the source"</li>
                        <li>Waste is "stacks that were overriden/cleansed". If you have high waste values that could mean there is an issue with your composition as someone may be overriding your stacks non-stop.</li>
                        <li>Extended by unknown source is the extension value for which we were unable to find an src, not included in generation.</li>
                        <li>Extended is "extended by unknown source + extended by known source other than yourself". Not included in generation. This value is just here to indicate if you are a good seed.</li>
                        </ul>                        
                        `
            }
        },
        mounted() {
            initTable("#" + this.id, 0, "asc");
        },
        updated() {
            updateTable("#" + this.id);
        }
    });

    Vue.component("damagedist-table-component", {
        props: ["dmgdist", "tableid", "actor", "isminion", "istarget", "phaseindex"],
        template: `<div>    <div v-if="actor !== null">        <div v-if="isminion">            {{actor.name}} did {{round3(100*dmgdist.contributedDamage/dmgdist.totalDamage)}}% of its master's total            {{istarget ? 'Target' :''}} dps        </div>        <div v-else>            {{actor.name}} did {{round3(100*dmgdist.contributedDamage/dmgdist.totalDamage)}}% of its total {{istarget ?            'Target' :''}} dps        </div>    </div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="tableid">        <thead>            <tr>                <th class="text-left">Skill</th>                <th></th>                <th>Damage</th>                <th>Min</th>                <th>Avg</th>                <th>Max</th>                <th>Casts</th>                <th>Hits</th>                <th>Hits per Cast</th>                <th>Crit</th>                <th>Flank</th>                <th>Glance</th>                <th>Wasted</th>                <th>Saved</th>            </tr>        </thead>        <tbody>            <tr v-for="row in dmgdist.distribution" :class="{condi: getSkill(row[0], row[1]).condi}">                <td class="text-left" :data-original-title="getSkill(row[0], row[1]).id">                    <img :src="getSkill(row[0], row[1]).icon" class="icon icon-hover"> {{getSkill(row[0],                    row[1]).name}}                </td>                <td>{{ round3(100*row[2]/dmgdist.contributedDamage) }}%</td>                <td :data-original-title="(row[2]/phaseDuration).toFixed(1) +' dps'">{{ row[2] }}</td>                <td>{{ Math.max(row[3],0) }}</td>                <td>{{ round(row[2]/row[6]) }}</td>                <td>{{ row[4] }}</td>                <td>{{ !getSkill(row[0], row[1]).condi && row[5] ? row[5] : ''}}</td>                <td>{{ row[6] }}</td>                <td>{{(!getSkill(row[0], row[1]).condi && row[6] && row[5]) ? round2(row[6]/row[5]) : ''}}</td>                <td :data-original-title="(!getSkill(row[0], row[1]).condi && row[6]) ? row[7] +' out of ' + row[6] + ' hits': false">                    {{(!getSkill(row[0], row[1]).condi && row[6]) ? round2(row[7]*100/row[6]) + '%' : ''}}                </td>                <td :data-original-title="(!getSkill(row[0], row[1]).condi && row[6]) ? row[8] +' out of ' + row[6] + ' hits': false">                    {{(!getSkill(row[0], row[1]).condi && row[6]) ? round2(row[8]*100/row[6]) + '%' : ''}}                </td>                <td :data-original-title="(!getSkill(row[0], row[1]).condi && row[6]) ? row[9] +' out of ' + row[6] + ' hits': false">                    {{(!getSkill(row[0], row[1]).condi && row[6]) ? round2(row[9]*100/row[6]) + '%' : ''}}                </td>                <td>{{ row[10] ? row[10] + 's' : ''}}</td>                <td>{{ row[11] ? row[11] + 's' : ''}}</td>            </tr>        </tbody>        <tfoot class="text-dark">            <tr>                <td class="text-left">Total</td>                <td></td>                <td :data-original-title="Math.round((dmgdist.contributedDamage ? dmgdist.contributedDamage : 0)/phaseDuration) +' dps'">{{dmgdist.contributedDamage ? dmgdist.contributedDamage : 0}}</td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>                <td></td>            </tr>        </tfoot>    </table></div>`,
        data: function () {
            return {
                sortdata: {
                    order: "desc",
                    index: 2
                }
            };
        },
        mixins: [roundingComponent],
        mounted() {
            var _this = this;
            initTable(
                "#" + this.tableid,
                this.sortdata.index,
                this.sortdata.order,
                function () {
                    var order = $("#" + _this.tableid)
                        .DataTable()
                        .order();
                    _this.sortdata.order = order[0][1];
                    _this.sortdata.index = order[0][0];
                }
            );
        },
        beforeUpdate() {
            $("#" + this.tableid)
                .DataTable()
                .destroy();
        },
        updated() {
            var _this = this;
            initTable(
                "#" + this.tableid,
                this.sortdata.index,
                this.sortdata.order,
                function () {
                    var order = $("#" + _this.tableid)
                        .DataTable()
                        .order();
                    _this.sortdata.order = order[0][1];
                    _this.sortdata.index = order[0][0];
                }
            );
        },
        methods: {
            getSkill: function (isBoon, id) {
                return findSkill(isBoon, id);
            }
        },
        computed: {
            phaseDuration: function () {
                var phase = logData.phases[this.phaseindex]; return Math.max(phase.end - phase.start,0.001);
            }
        }
    });
};
/*jshint esversion: 6 */

var compileHeader = function () {
    Vue.component("encounter-component", {
        props: [],
        template: `<div>    <h3 class="card-header text-center">{{ encounter.name }}</h3>    <div class="card-body container">        <div class="d-flex flex-row justify-content-center align-items-center">            <img class="mr-3 icon-xl" :src="encounter.icon" :alt="encounter.name">            <div class="ml-3 d-flex flex-column justify-content-center">                <div class="mb-2" v-for="target in encounter.targets">                    <div v-if="encounter.targets.length > 1" class="small" style="text-align:center;">                        {{target.name}}                    </div>                    <div class="progress" style="width: 100%; height: 10px;" :data-original-title="(target.hpLeft ? target.hpLeft : 0) + '% left'">                        <div class="progress-bar bg-success" :style="{width: target.percent + '%'}" role="progressbar"                            :aria-valuenow="target.percent" aria-valuemin="0" aria-valuemax="100"></div>                    </div>                    <div class="small" style="text-align:center;">{{ target.health }} Health</div>                </div>                <div class="mb-2 text" :class="getResultClass(encounter.success)">                    Result: {{getResultText(encounter.success)}}                </div>                <div class="mb-2">Duration: {{ encounter.duration }}</div>            </div>        </div>    </div></div>`,
        methods: {
            getResultText: function (success) {
                return success ? "Success" : "Failure";
            },
            getResultClass: function (success) {
                return success ? ["text-success"] : ["text-warning"];
            }
        },
        computed: {
            encounter: function () {
                var targets = [];
                for (var i = 0; i < logData.phases[0].targets.length; i++) {
                    var targetData = logData.targets[logData.phases[0].targets[i]];
                    targets.push(targetData);
                }

                var encounter = {
                    name: logData.fightName,
                    success: logData.success,
                    icon: logData.fightIcon,
                    duration: logData.encounterDuration,
                    targets: targets
                };
                return encounter;
            }
        }
    });

    Vue.component("phase-component", {
        props: ["phases"],
        template: `<div v-if="phases.length > 1">    <ul class="nav nav-pills d-flex flex-row justify-content-center">        <li class="nav-item" v-for="(phase, id) in phases" :data-original-title="getPhaseData(id).duration / 1000.0 + ' seconds'">            <a class="nav-link" @click="select(phase)" :class="{active: phase.active}">{{getPhaseData(id).name}}</a>        </li>    </ul></div>`,
        methods: {
            select: function (phase) {
                for (var i = 0; i < this.phases.length; i++) {
                    this.phases[i].active = false;
                }
                phase.active = true;
            },
            getPhaseData: function(id) {
                return logData.phases[id];
            }
        }
    });

    Vue.component("target-component", {
        props: ["targets", "phaseindex"],
        template: `<div class="d-flex flex-row justify-content-center flex-wrap">    <div v-for="(target, id) in targets" v-show="show(id)">        <img class="icon-lg mr-2 ml-2 target-cell" :src="getTargetData(id).icon" :alt="getTargetData(id).name" :data-original-title="getTargetData(id).name"            :class="{active: target.active}" @click="target.active = !target.active">        <target-data-component :targetid="id"></target-data-component>    </div></div>`,
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            }
        },
        methods: {
            show: function (index) {
                return this.phase.targets.indexOf(index) !== -1;
            },
            getTargetData: function(id) {
                return logData.targets[id];
            }
        }
    });

    Vue.component("player-component", {
        props: ["playerindex", "players"],
        template: `<div>    <img class="icon mb-1" src="https://i.imgur.com/nSYuby8.png" :data-original-title="scoreExpl" />    <table class="table table-sm table-bordered composition">        <tbody>            <tr v-for="group in groups">                <td v-for="player in group" class="player-cell" :class="{active: player.id === playerindex}" @click="select(player.id)">                    <div>                        <img :src="player.icon" :alt="player.profession" class="icon" :data-original-title="player.profession">                        <img v-if="player.condi > 0" src="/cache/https_wiki.guildwars2.com_images_5_54_Condition_Damage.png"                             alt="Condition Damage" class="icon" :data-original-title="'Condition Damage: ' + player.condi">                        <img v-if="player.conc > 0" src="/cache/https_wiki.guildwars2.com_images_4_44_Boon_Duration.png" alt="Concentration"                             class="icon" :data-original-title="'Concentration: ' + player.conc">                        <img v-if="player.heal > 0" src="/cache/https_wiki.guildwars2.com_images_8_81_Healing_Power.png" alt="Healing Power"                             class="icon" :data-original-title="'Healing Power: ' + player.heal">                        <img v-if="player.tough > 0" src="/cache/https_wiki.guildwars2.com_images_1_12_Toughness.png" alt="Toughness"                             class="icon" :data-original-title="'Toughness: ' + player.tough">                    </div>                    <div v-if="player.l1Set.length > 0 || player.l2Set.length > 0">                        <img v-for="wep in player.l1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        <span v-if="player.l1Set.length > 0 && player.l2Set.length > 0">/</span>                        <img v-for="wep in player.l2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                    </div>                    <div v-if="player.a1Set.length > 0 || player.a2Set.length > 0">                        <img v-for="wep in player.a1Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                        <span v-if="player.a1Set.length > 0 && player.a2Set.length > 0">/</span>                        <img v-for="wep in player.a2Set" :src="getIcon(wep)" :data-original-title="wep" class="icon">                    </div>                    <div class="shorten" :data-original-title="player.acc">                        {{ player.name }}                    </div>                </td>            </tr>        </tbody>    </table></div>`,
        methods: {
            getIcon: function (path) {
                return urls[path];
            },
            select: function (id) {
                var oldStatus = this.players[id].active;
                for (var i = 0; i < this.players.length; i++) {
                    this.players[i].active = false;
                }
                this.players[id].active = !oldStatus;
            }
        },
        computed: {
            scoreExpl: function () {
                return "Scores are relative to the squad. 10 means that that player had the highest stat in the squad. 8 means that that player had between 80% and 89% of the highest scored player's stat."
            },
            groups: function () {
                var aux = [];
                var i = 0;
                for (i = 0; i < logData.players.length; i++) {
                    var playerData = logData.players[i];
                    if (playerData.isConjure) {
                        continue;
                    }
                    if (!aux[playerData.group]) {
                        aux[playerData.group] = [];
                    }
                    aux[playerData.group].push(playerData);
                }

                var noUndefinedGroups = [];
                for (i = 0; i < aux.length; i++) {
                    if (aux[i]) {
                        noUndefinedGroups.push(aux[i]);
                    }
                }
                return noUndefinedGroups;
            }
        }
    });
};/*jshint esversion: 6 */
var Layout = function (desc) {
    this.desc = desc;
    this.tabs = null;
};

Layout.prototype.addTab = function (tab) {
    if (this.tabs === null) {
        this.tabs = [];
    }
    this.tabs.push(tab);
};

var Tab = function (name, options) {
    this.name = name;
    options = options ? options : {};
    this.layout = null;
    this.desc = options.desc ? options.desc : null;
    this.active = options.active ? options.active : false;
    this.dataType =
        typeof options.dataType !== "undefined" ? options.dataType : -1;
};

var compileLayout = function () {
    // Compile
    Vue.component("general-layout-component", {
        name: "general-layout-component",
        template: `<div>    <h2 v-if="layout.desc" :class="{'text-center': phaseindex >= 0}">{{ layoutName }}</h2>    <ul class="nav nav-tabs">        <li v-for="tab in layout.tabs">            <a class="nav-link" :class="{active: tab.active}" @click="select(tab, layout.tabs)"> {{ tab.name }} </a>        </li>    </ul>    <div v-for="tab in layout.tabs" v-show="tab.active">        <div v-if="tab.desc">{{ tab.desc }}</div>        <div v-if="tab.layout">            <general-layout-component :layout="tab.layout" :phaseindex="-1"></general-layout-component>        </div>    </div></div>`,
        props: ["layout", "phaseindex"],
        methods: {
            select: function (tab, tabs) {
                for (var i = 0; i < tabs.length; i++) {
                    tabs[i].active = false;
                }
                tab.active = true;
            }
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            layoutName: function () {
                if (this.phaseindex < 0) {
                    return this.layout.desc;
                }
                return this.layout.desc ?
                    this.phase.name + " " + this.layout.desc :
                    this.phase.name;
            }
        }
    });
    //
    var layout = new Layout("Summary");
    // general stats
    var stats = new Tab("General Stats", {
        active: true
    });
    var statsLayout = new Layout(null);
    statsLayout.addTab(
        new Tab("Damage Stats", {
            active: true,
            dataType: DataTypes.damageTable
        })
    );
    statsLayout.addTab(
        new Tab("Gameplay Stats", {
            dataType: DataTypes.gameplayTable
        })
    );
    statsLayout.addTab(
        new Tab("Defensive Stats", {
            dataType: DataTypes.defTable
        })
    );
    statsLayout.addTab(
        new Tab("Support Stats", {
            dataType: DataTypes.supTable
        })
    );
    stats.layout = statsLayout;
    layout.addTab(stats);
    // buffs
    var buffs = new Tab("Buffs");
    var buffLayout = new Layout(null);
    buffLayout.addTab(
        new Tab("Boons", {
            active: true,
            dataType: DataTypes.boonTable
        })
    );
    if (logData.offBuffs.length > 0) {
        buffLayout.addTab(new Tab("Offensive Buffs", {
            dataType: DataTypes.offensiveBuffTable
        }));
    }
    if (logData.defBuffs.length > 0) {
        buffLayout.addTab(new Tab("Defensive Buffs", {
            dataType: DataTypes.defensiveBuffTable
        }));
    }
    if (logData.persBuffs) {
        var hasPersBuffs = false;
        for (var prop in logData.persBuffs) {
            if (logData.persBuffs.hasOwnProperty(prop) && logData.persBuffs[prop].length > 0) {
                hasPersBuffs = true;
                break;
            }
        }
        if (hasPersBuffs) {
            buffLayout.addTab(new Tab("Personal Buffs", {
                dataType: DataTypes.personalBuffTable
            }));
        }
    }
    buffs.layout = buffLayout;
    layout.addTab(buffs);
    // damage modifiers
    if (!logData.wvw) {
        var damageModifiers = new Tab("Damage Modifiers", {
            dataType: DataTypes.dmgModifiersTable
        });
        layout.addTab(damageModifiers);
    }
    // mechanics
    if (logData.mechanicMap.length > 0 && !logData.noMechanics) {
        var mechanics = new Tab("Mechanics", {
            dataType: DataTypes.mechanicTable
        });
        layout.addTab(mechanics);
    }
    // graphs
    var graphs = new Tab("Graph", {
        dataType: DataTypes.dpsGraph
    });
    layout.addTab(graphs);
    // targets
    if (!logData.wvw) {
        var targets = new Tab("Targets Summary", {
            dataType: DataTypes.targetTab
        });
        layout.addTab(targets);
    }
    // player
    var player = new Tab("Player Summary", {
        dataType: DataTypes.playerTab
    });
    layout.addTab(player);
    return layout;
};/*jshint esversion: 6 */

var compileGeneralStats = function () {
    Vue.component("damage-stats-component", {
        props: ["activetargets", "playerindex", "phaseindex"],
        template: `<div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" id="dps-table">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th class="text-left">Name</th>                <th>Account</th>                <th v-if="!wvw">Target DPS</th>                <th v-if="!wvw">Power</th>                <th v-if="!wvw">Condi</th>                <th v-if="!wvw">All DPS</th>                <th v-else>All Damage</th>                <th>Power</th>                <th>Condi</th>            </tr>        </thead>        <tbody>            <tr v-for="row in tableData.rows" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td>{{row.player.acc}}</td>                <td v-if="!wvw" :data-original-title="row.dps[0] + ' dmg'">{{row.dps[1]}}</td>                <td v-if="!wvw" :data-original-title="row.dps[2] + ' dmg'">{{row.dps[3]}}</td>                <td v-if="!wvw" :data-original-title="row.dps[4] + ' dmg'">{{row.dps[5]}}</td>                <td v-if="!wvw" :data-original-title="row.dps[6] + ' dmg'">{{row.dps[7]}}</td>                <td v-else :data-original-title="row.dps[7] + ' dps'">{{row.dps[6]}}</td>                <td v-if="!wvw" :data-original-title="row.dps[8] + ' dmg'">{{row.dps[9]}}</td>                <td v-else :data-original-title="row.dps[9] + ' dps'">{{row.dps[8]}}</td>                <td v-if="!wvw" :data-original-title="row.dps[10] + ' dmg'">{{row.dps[11]}}</td>                <td v-else :data-original-title="row.dps[11] + ' dps'">{{row.dps[10]}}</td>            </tr>        </tbody>        <tfoot>            <tr v-for="sum in tableData.sums">                <td></td>                <td></td>                <td class="text-left">{{sum.name}}</td>                <td></td>                <td v-if="!wvw" :data-original-title="sum.dps[0] + ' dmg'">{{sum.dps[1]}}</td>                <td v-if="!wvw" :data-original-title="sum.dps[2] + ' dmg'">{{sum.dps[3]}}</td>                <td v-if="!wvw" :data-original-title="sum.dps[4] + ' dmg'">{{sum.dps[5]}}</td>                <td v-if="!wvw" :data-original-title="sum.dps[6] + ' dmg'">{{sum.dps[7]}}</td>                <td v-else :data-original-title="sum.dps[7] + ' dps'">{{sum.dps[6]}}</td>                <td v-if="!wvw" :data-original-title="sum.dps[8] + ' dmg'">{{sum.dps[9]}}</td>                <td v-else :data-original-title="sum.dps[9] + ' dps'">{{sum.dps[8]}}</td>                <td v-if="!wvw" :data-original-title="sum.dps[10] + ' dmg'">{{sum.dps[11]}}</td>                <td v-else :data-original-title="sum.dps[11] + ' dps'">{{sum.dps[10]}}</td>            </tr>        </tfoot>    </table></div>`,
        data: function () {
            return {
                wvw: !!logData.wvw,
                cacheTarget: new Map()
            };
        },
        mounted() {
            initTable("#dps-table", 4, "desc");
        },
        updated() {
            updateTable("#dps-table");
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            tableData: function () {
                var cacheID = this.phaseindex + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.cacheTarget.has(cacheID)) {
                    return this.cacheTarget.get(cacheID);
                }
                var rows = [];
                var sums = [];
                var total = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                var groups = [];
                var i, j;
                for (i = 0; i < this.phase.dpsStats.length; i++) {
                    var dpsStat = this.phase.dpsStats[i];
                    var dpsTargetStat = [0, 0, 0, 0, 0, 0];
                    for (j = 0; j < this.activetargets.length; j++) {
                        var tar = this.phase.dpsStatsTargets[i][this.activetargets[j]];
                        for (var k = 0; k < dpsTargetStat.length; k++) {
                            dpsTargetStat[k] += tar[k];
                        }
                    }
                    var player = logData.players[i];
                    if (!groups[player.group]) {
                        groups[player.group] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    }
                    var dps = dpsTargetStat.concat(dpsStat);
                    for (j = 0; j < dps.length; j++) {
                        total[j] += dps[j];
                        groups[player.group][j] += dps[j];
                    }
                    rows.push({
                        player: player,
                        dps: dps
                    });
                }
                for (i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push({
                            name: "Group " + i,
                            dps: groups[i]
                        });
                    }
                }
                sums.push({
                    name: "Total",
                    dps: total
                });
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cacheTarget.set(cacheID, res);
                return res;
            }
        }
    });

    Vue.component("defense-stats-component", {
        props: ["phaseindex", "playerindex"],
        template: `<div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" id="def-table">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th class="text-left">Name</th>                <th>Account</th>                <th>Dmg Taken</th>                <th>Dmg Barrier</th>                <th>Blocked</th>                <th>Invulned</th>                <th>Interrupted</th>                <th>Evaded</th>                <th>                    <span data-toggle="tooltip" data-html="true" data-placement="top" data-original-title="Dodges or Mirage Cloak ">Dodges</span>                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_c_c6_Downed_enemy.png" alt="Downs" data-original-title="Times downed"                        class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_4_4a_Ally_death__28interface_29.png" alt="Dead"                        data-original-title="Times died" class="icon icon-hover">                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in tableData.rows" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td>{{row.player.acc}}</td>                <td>{{row.def[0]}}</td>                <td>{{row.def[1]}}</td>                <td>{{row.def[2]}}</td>                <td>{{row.def[3]}}</td>                <td>{{row.def[4]}}</td>                <td>{{row.def[5]}}</td>                <td>{{row.def[6]}}</td>                <td :data-original-title="row.def[8]">{{row.def[7]}}</td>                <td :data-original-title="row.def[10]">{{row.def[9]}}</td>            </tr>        </tbody>        <tfoot>            <tr v-for="sum in tableData.sums">                <td></td>                <td></td>                <td class="text-left">{{sum.name}}</td>                <td></td>                <td>{{sum.def[0]}}</td>                <td>{{sum.def[1]}}</td>                <td>{{sum.def[2]}}</td>                <td>{{sum.def[3]}}</td>                <td>{{sum.def[4]}}</td>                <td>{{sum.def[5]}}</td>                <td>{{sum.def[6]}}</td>                <td>{{sum.def[7]}}</td>                <td>{{sum.def[9]}}</td>            </tr>        </tfoot>    </table></div>`,
        data: function () {
            return {
                cache: new Map()
            };
        },
        mounted() {
            initTable("#def-table", 4, "desc");
        },
        updated() {
            updateTable("#def-table");
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            tableData: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var rows = [];
                var sums = [];
                var total = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                var groups = [];
                var i;
                for (i = 0; i < this.phase.defStats.length; i++) {
                    var def = this.phase.defStats[i];
                    var player = logData.players[i];
                    if (player.isConjure) {
                        continue;
                    }
                    rows.push({
                        player: player,
                        def: def
                    });
                    if (!groups[player.group]) {
                        groups[player.group] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    }
                    for (var j = 0; j < total.length; j++) {
                        total[j] += def[j];
                        groups[player.group][j] += def[j];
                    }
                }
                for (i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push({
                            name: "Group " + i,
                            def: groups[i]
                        });
                    }
                }
                sums.push({
                    name: "Total",
                    def: total
                });
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cache.set(this.phaseindex, res);
                return res;
            }
        }
    });

    Vue.component("support-stats-component", {
        props: ["phaseindex", "playerindex"],
        template: `<div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" id="sup-table">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th class="text-left">Name</th>                <th>Account</th>                <th>Condi Cleanse on Others</th>                <th>Condi Cleanse on Self</th>                <th>Boon Strips</th>                <th>Resurrects</th>            </tr>        </thead>        <tbody>            <tr v-for="row in tableData.rows" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td>{{row.player.acc}}</td>                <td :data-original-title="row.sup[1] + ' seconds'">{{row.sup[0]}}</td>                <td :data-original-title="row.sup[3] + ' seconds'">{{row.sup[2]}}</td>                <td :data-original-title="row.sup[5] + ' seconds'">{{row.sup[4]}}</td>                <td :data-original-title="row.sup[7] + ' seconds'">{{row.sup[6]}}</td>            </tr>        </tbody>        <tfoot>            <tr v-for="sum in tableData.sums">                <td></td>                <td></td>                <td class="text-left">{{sum.name}}</td>                <td></td>                <td :data-original-title="round3(sum.sup[1]) + ' seconds'">{{sum.sup[0]}}</td>                <td :data-original-title="round3(sum.sup[3])  + ' seconds'">{{sum.sup[2]}}</td>                <td :data-original-title="round3(sum.sup[5])  + ' seconds'">{{sum.sup[4]}}</td>                <td :data-original-title="round3(sum.sup[7])  + ' seconds'">{{sum.sup[6]}}</td>            </tr>        </tfoot>    </table></div>`,
        data: function () {
            return {
                cache: new Map()
            };
        },
        mixins: [roundingComponent],
        mounted() {
            initTable("#sup-table", 4, "desc");
        },
        updated() {
            updateTable("#sup-table");
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            tableData: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var rows = [];
                var sums = [];
                var total = [0, 0, 0, 0, 0, 0, 0, 0];
                var groups = [];
                var i;
                for (i = 0; i < this.phase.supportStats.length; i++) {
                    var sup = this.phase.supportStats[i];
                    var player = logData.players[i];
                    if (player.isConjure) {
                        continue;
                    }
                    rows.push({
                        player: player,
                        sup: sup
                    });
                    if (!groups[player.group]) {
                        groups[player.group] = [0, 0, 0, 0, 0, 0, 0, 0];
                    }
                    for (var j = 0; j < sup.length; j++) {
                        total[j] += sup[j];
                        groups[player.group][j] += sup[j];
                    }
                }
                for (i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push({
                            name: "Group " + i,
                            sup: groups[i]
                        });
                    }
                }
                sums.push({
                    name: "Total",
                    sup: total
                });
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cache.set(this.phaseindex, res);
                return res;
            }
        }
    });

    Vue.component("gameplay-stats-component", {
        props: ["activetargets", "playerindex", "phaseindex"],
        template: `<div>    <div class="d-flex flex-row justify-content-center mt-1 mb-1">        <ul v-if="!wvw" class="nav nav-pills">            <li class="nav-item">                <a class="nav-link" @click="mode = 1" :class="{active: mode}">Target</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="mode = 0" :class="{active: !mode }">All</a>            </li>        </ul>    </div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" id="dmg-table">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th class="text-left">Name</th>                <th>Account</th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_9_95_Critical_Chance.png" alt="Crits"                         data-original-title="Percent time hits critical" class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_b_bb_Hunter_27s_Tactics.png" alt="Flank"                         data-original-title="Percent time hits while flanking" class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_f_f9_Weakness.png" alt="Glance" data-original-title="Percent time hits while glancing"                         class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_3_33_Blinded.png" alt="Miss" data-original-title="Number of hits while blinded"                         class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_7_79_Daze.png" alt="Interupts" data-original-title="Number of hits interupted?/hits used to interupt"                         class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_e_eb_Determined.png" alt="Ivuln" data-original-title="times the enemy was invulnerable to attacks"                         class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_b_b3_Out_Of_Health_Potions.png" alt="Wasted"                         data-original-title="Time wasted(in seconds) interupting skill casts" class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_e_eb_Ready.png" alt="Saved" data-original-title="Time saved(in seconds) interupting skill casts"                         class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_c_ce_Weapon_Swap_Button.png" alt="Swap"                         data-original-title="Times weapon swapped" class="icon icon-hover">                </th>                <th>                    <img src="/cache/https_wiki.guildwars2.com_images_e_ef_Commander_arrow_marker.png" alt="Stack"                         data-original-title="Average Distance from center of group stack" class="icon icon-hover">                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in (mode ? tableDataTarget.rows : tableData.rows)" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td>{{row.player.acc}}</td>                <td :data-original-title="row.data[2] + ' out of ' + row.data[1] + ' critable hits<br>Total Damage Critical Damage: ' + row.data[3]">                    {{round2(100*row.data[2] / row.data[1])}}%                </td>                <td :data-original-title="row.data[4] + ' out of ' + row.data[0] + ' hits'">                    {{round2(100*row.data[4]/ row.data[0])}}%                </td>                <td :data-original-title="row.data[5] + ' out of ' + row.data[0] + ' hits'">                    {{round2(100*row.data[5]/ row.data[0])}}%                </td>                <td>{{row.data[6]}}</td>                <td>{{row.data[7]}}</td>                <td>{{row.data[8]}}</td>                <td :data-original-title="row.commons[1] + ' cancels'">{{row.commons[0]}}</td>                <td :data-original-title="row.commons[3] + ' cancels'">{{row.commons[2]}}</td>                <td>{{row.commons[4]}}</td>                <td>{{row.commons[5]}}</td>            </tr>        </tbody>        <tfoot>            <tr v-for="row in (mode ? tableDataTarget.sums : tableData.sums)">                <td></td>                <td></td>                <td class="text-left">{{row.name}}</td>                <td></td>                <td :data-original-title="row.data[2] + ' out of ' + row.data[1] + ' critable hits<br>Total Damage Critical Damage: ' + row.data[3]">                    {{round2(100*row.data[2] / row.data[1])}}%                </td>                <td :data-original-title="row.data[4] + ' out of ' + row.data[0] + ' hits'">                    {{round2(100*row.data[4]/ row.data[0])}}%                </td>                <td :data-original-title="row.data[5] + ' out of ' + row.data[0] + ' hits'">                    {{round2(100*row.data[5]/ row.data[0])}}%                </td>                <td>{{row.data[6]}}</td>                <td>{{row.data[7]}}</td>                <td>{{row.data[8]}}</td>                <td :data-original-title="row.commons[1] + ' cancels'">{{round3(row.commons[0])}}</td>                <td :data-original-title="row.commons[3] + ' cancels'">{{round3(row.commons[2])}}</td>                <td>{{row.commons[4]}}</td>                <td>{{round2(row.commons[5] / row.count)}}</td>            </tr>        </tfoot>    </table></div>`,
        mixins: [roundingComponent],
        data: function () {
            return {
                wvw: !!logData.wvw,
                mode: logData.wvw ? 0 :1,
                cache: new Map(),
                cacheTarget: new Map()
            };
        },
        mounted() {
            initTable("#dmg-table", 1, "desc");
        },
        updated() {
            updateTable("#dmg-table");
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            tableData: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var rows = [];
                var sums = [];
                var groups = [];
                var total = {
                    name: "Total",
                    data: [],
                    commons: [],
                    count: 0
                };
                for (var i = 0; i < this.phase.dmgStats.length; i++) {
                    var commons = [];
                    var data = [];
                    var player = logData.players[i];
                    if (player.isConjure) {
                        continue;
                    }
                    if (!groups[player.group]) {
                        groups[player.group] = {
                            name: "Group " + player.group,
                            data: [],
                            commons: [],
                            count: 0
                        };
                    }
                    groups[player.group].count++;
                    total.count++;
                    var stats = this.phase.dmgStats[i];
                    for (var j = 0; j < stats.length; j++) {
                        if (j >= 9) {
                            commons[j - 9] = stats[j];
                            groups[player.group].commons[j - 9] = (groups[player.group].commons[j - 9] || 0) + commons[j - 9];
                            total.commons[j - 9] = (total.commons[j - 9] || 0) + commons[j - 9];
                        } else {
                            data[j] = stats[j];
                            groups[player.group].data[j] = (groups[player.group].data[j] || 0) + data[j];
                            total.data[j] = (total.data[j] || 0) + data[j];
                        }
                    }
                    rows.push({
                        player: player,
                        commons: commons,
                        data: data
                    });
                }
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push(groups[i]);
                    }
                }
                sums.push(total);
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cache.set(this.phaseindex, res);
                return res;
            },
            tableDataTarget: function () {
                var cacheID = this.phaseindex + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.cacheTarget.has(cacheID)) {
                    return this.cacheTarget.get(cacheID);
                }
                var rows = [];
                var sums = [];
                var groups = [];
                var total = {
                    name: "Total",
                    data: [],
                    commons: [],
                    count: 0
                };
                for (var i = 0; i < this.phase.dmgStats.length; i++) {
                    var commons = [];
                    var data = [];
                    var player = logData.players[i];
                    if (player.isConjure) {
                        continue;
                    }
                    if (!groups[player.group]) {
                        groups[player.group] = {
                            name: "Group " + player.group,
                            data: [],
                            commons: [],
                            count: 0
                        };
                    }
                    groups[player.group].count++;
                    total.count++;
                    var stats = this.phase.dmgStats[i];
                    for (var j = 0; j < stats.length; j++) {
                        if (j >= 9) {
                            commons[j - 9] = stats[j];
                            groups[player.group].commons[j - 9] = (groups[player.group].commons[j - 9] || 0) + commons[j - 9];
                            total.commons[j - 9] = (total.commons[j - 9] || 0) + commons[j - 9];
                        } else {
                            for (var k = 0; k < this.activetargets.length; k++) {
                                var tar = this.phase.dmgStatsTargets[i][this.activetargets[k]];
                                data[j] = (data[j] || 0) + tar[j];
                            }
                            groups[player.group].data[j] = (groups[player.group].data[j] || 0) + data[j];
                            total.data[j] = (total.data[j] || 0) + data[j];
                        }
                    }
                    rows.push({
                        player: player,
                        commons: commons,
                        data: data
                    });
                }
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push(groups[i]);
                    }
                }
                sums.push(total);
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cacheTarget.set(cacheID, res);
                return res;
            }
        }
    });
};/*jshint esversion: 6 */

var compileDamageModifiers = function () {
    Vue.component("dmgmodifier-stats-component", {
        props: ['phaseindex', 'playerindex', 'activetargets',
        ],
        template: `<div>    <ul class="nav nav-tabs">        <li v-if="itemModifiers.length > 0">            <a class="nav-link" :class="{active: displayMode === 0}" @click="displayMode = 0"> Gear Based Damage Modifiers </a>        </li>        <li v-if="commonModifiers.length > 0">            <a class="nav-link" :class="{active: displayMode === 1}" @click="displayMode = 1"> Shared Damage Modifiers </a>        </li>        <li>            <a class="nav-link" :class="{active: displayMode === 2}" @click="displayMode = 2"> Class Based Damage Modifiers </a>        </li>    </ul>    <ul v-if="!wvw" class="nav nav-pills d-flex flex-row justify-content-center mt-1 mb-1">        <li class="nav-item">            <a class="nav-link" @click="mode = 1" :class="{active: mode}">Target</a>        </li>        <li class="nav-item">            <a class="nav-link" @click="mode = 0" :class="{active: !mode }">All</a>        </li>    </ul>    <keep-alive>        <dmgmodifier-table-component v-if="displayMode === 0" :key="'gear'"                                     :phaseindex="phaseindex" :playerindex="playerindex" :activetargets="activetargets"                                     :mode="mode" :id="'damage-modifier-item-table'" :playerindices="null" :modifiers="itemModifiers" :modifiersdata="phase.dmgModifiersItem" :sum="true"></dmgmodifier-table-component>        <dmgmodifier-table-component v-if="displayMode === 1" :key="'common'" :phaseindex="phaseindex" :playerindex="playerindex" :activetargets="activetargets"                                     :mode="mode" :id="'damage-modifier-common-table'" :playerindices="null" :modifiers="commonModifiers" :modifiersdata="phase.dmgModifiersCommon" :sum="true"></dmgmodifier-table-component>        <dmgmodifier-persstats-component v-if="displayMode === 2" :key="'pers'" :phaseindex="phaseindex" :playerindex="playerindex" :activetargets="activetargets" :mode="mode"></dmgmodifier-persstats-component>    </keep-alive></div>`,
        data: function () {
            return {
                wvw: !!logData.wvw,
                mode: logData.wvw ? 0 : 1,
                displayMode: logData.dmgModifiersItem.length > 0 ? 0 : logData.dmgModifiersCommon.length > 0 ? 1 : 2
            };
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            commonModifiers: function () {
                var modifiers = [];
                for (var i = 0; i < logData.dmgModifiersCommon.length; i++) {
                    modifiers.push(logData.damageModMap['d' + logData.dmgModifiersCommon[i]]);
                }
                return modifiers;
            },
            itemModifiers: function () {
                var modifiers = [];
                for (var i = 0; i < logData.dmgModifiersItem.length; i++) {
                    modifiers.push(logData.damageModMap['d' + logData.dmgModifiersItem[i]]);
                }
                return modifiers;
            }
        }
    });

    Vue.component("dmgmodifier-persstats-component", {
        props: ['phaseindex', 'playerindex', 'activetargets', 'mode'
        ],
        template: `<div>    <ul class="nav nav-pills d-flex flex-row justify-content-center mt-2 mb-2">        <li v-for="base in bases" class="nav-item">            <a class="nav-link" @click="specmode = base" :class="{active: specmode === base}">{{ base }}</a>        </li>    </ul>    <div>        <div v-for="(spec, index) in orderedSpecs" class="mt-3 mb-3">            <div v-show="specToBase[spec.name] === specmode">                <h3 class="text-center">{{ spec.name }}</h3>                <dmgmodifier-table-component :phaseindex="phaseindex" :playerindex="playerindex" :activetargets="activetargets"                                             :mode="mode" :id="'damage-modifier-pers-table-'+spec.name" :modifiers="personalModifiers[index]" :playerindices="spec.ids" :modifiersdata="phase.dmgModifiersPers" :sum="false"></dmgmodifier-table-component>            </div>        </div>    </div></div>`,
        data: function () {
            return {
                bases: [],
                specmode: "Warrior",
                specToBase: specToBase
            };
        },
        computed: {
            phase: function () {
                return logData.phases[this.phaseindex];
            },
            orderedSpecs: function () {
                var res = [];
                var aux = new Set();
                for (var i = 0; i < specs.length; i++) {
                    var spec = specs[i];
                    var pBySpec = [];
                    for (var j = 0; j < logData.players.length; j++) {
                        if (logData.players[j].profession === spec && logData.phases[0].dmgModifiersPers[j].data.length > 0) {
                            pBySpec.push(j);
                        }
                    }
                    if (pBySpec.length) {
                        aux.add(specToBase[spec]);
                        res.push({
                            ids: pBySpec,
                            name: spec
                        });
                    }
                }
                this.bases = [];
                var _this = this;
                aux.forEach(function (value, value2, set) {
                    _this.bases.push(value);
                });
                this.specmode = this.bases[0];
                return res;
            },
            personalModifiers: function () {
                var res = [];
                for (var i = 0; i < this.orderedSpecs.length; i++) {
                    var spec = this.orderedSpecs[i];
                    var data = [];
                    for (var j = 0; j < logData.dmgModifiersPers[spec.name].length; j++) {
                        data.push(logData.damageModMap['d' + logData.dmgModifiersPers[spec.name][j]]);
                    }
                    res.push(data);
                }
                return res;
            }
        }
    });

    Vue.component("dmgmodifier-table-component", {
        props: ['phaseindex', 'id', 'playerindex', 'playerindices', 'activetargets', 'modifiers', 'modifiersdata', 'mode', 'sum'
        ],
        template: `<div>    <table class="table table-sm table-striped table-hover" cellspacing="0" width="100%" :id="id">        <thead>            <tr>                <th>Sub</th>                <th></th>                <th class="text-left">Name</th>                <th v-for="modifier in modifiers" :data-original-title="modifier.name + '<br>' + modifier.tooltip">                    <img :src="modifier.icon" :alt="modifier.name" class="icon icon-hover">                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in (mode ? tableDataTarget.rows : tableData.rows)" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon"><span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td v-for="(modifier, index) in modifiers" :data-original-title="getTooltip(row.data[index])">                    {{getCellValue(row.data[index])}}                </td>            </tr>        </tbody>        <tfoot v-if="sum">            <tr v-for="row in (mode ? tableDataTarget.sums : tableData.sums)">                <td></td>                <td></td>                <td class="text-left">{{row.name}}</td>                <td v-for="(modifier, index) in modifiers" :data-original-title="getTooltip(row.data[index])">                    {{getCellValue(row.data[index])}}                </td>            </tr>        </tfoot>    </table></div>`,
        data: function () {
            return {
                cache: new Map(),
                cacheTarget: new Map()
            };
        },
        computed: {
            indicesToUse: function () {
                var res = [];
                if (this.playerindices !== null) {
                    for (var i = 0; i < this.playerindices.length; i++) {
                        res.push(this.playerindices[i]);
                    }
                    return res;
                }
                for (var i = 0; i < logData.players.length; i++) {
                    res.push(i);
                }
                return res;
            },
            tableData: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var rows = [];
                var sums = [];
                var groups = [];
                var total = {
                    name: "Total",
                    data: []
                };
                var j;
                for (var i = 0; i < this.indicesToUse.length; i++) {
                    var index = this.indicesToUse[i];
                    var player = logData.players[index];
                    if (player.isConjure) {
                        continue;
                    }
                    if (!groups[player.group]) {
                        groups[player.group] = {
                            name: "Group" + player.group,
                            data: []
                        };
                    }
                    var dmgModifier = this.modifiersdata[index].data;
                    var data = [];
                    for (j = 0; j < this.modifiers.length; j++) {
                        data[j] = dmgModifier[j];
                        if (!groups[player.group].data[j]) {
                            groups[player.group].data[j] = [0, 0, 0, 0];
                        }
                        if (!total.data[j]) {
                            total.data[j] = [0, 0, 0, 0];
                        }
                        for (var k = 0; k < data[j].length; k++) {
                            groups[player.group].data[j][k] += data[j][k];
                            total.data[j][k] += data[j][k];
                        }
                    }
                    rows.push({
                        player: player,
                        data: data
                    });
                }
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push(groups[i]);
                    }
                }
                sums.push(total);
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cache.set(this.phaseindex, res);
                return res;
            },
            tableDataTarget: function () {
                var cacheID = this.phaseindex + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.cacheTarget.has(cacheID)) {
                    return this.cacheTarget.get(cacheID);
                }
                var rows = [];
                var sums = [];
                var groups = [];
                var total = {
                    name: "Total",
                    data: []
                };
                var j;
                for (var i = 0; i < this.indicesToUse.length; i++) {
                    var index = this.indicesToUse[i];
                    var player = logData.players[index];
                    if (player.isConjure) {
                        continue;
                    }
                    if (!groups[player.group]) {
                        groups[player.group] = {
                            name: "Group" + player.group,
                            data: []
                        };
                    }
                    var data = [];
                    for (j = 0; j < this.modifiers.length; j++) {
                        data[j] = [0, 0, 0, 0];
                        if (!groups[player.group].data[j]) {
                            groups[player.group].data[j] = [0, 0, 0, 0];
                        }
                        if (!total.data[j]) {
                            total.data[j] = [0, 0, 0, 0];
                        }
                    }
                    var dmgModifier = this.modifiersdata[index].dataTarget;
                    for (j = 0; j < this.activetargets.length; j++) {
                        var modifier = dmgModifier[this.activetargets[j]];
                        for (var k = 0; k < this.modifiers.length; k++) {
                            var targetData = modifier[k];
                            var curData = data[k];
                            for (var l = 0; l < targetData.length; l++) {
                                curData[l] += targetData[l];
                            }
                        }
                    }
                    for (j = 0; j < this.modifiers.length; j++) {
                        for (var k = 0; k < data[j].length; k++) {
                            groups[player.group].data[j][k] += data[j][k];
                            total.data[j][k] += data[j][k];
                        }
                    }
                    rows.push({
                        player: player,
                        data: data
                    });
                }
                for (var i = 0; i < groups.length; i++) {
                    if (groups[i]) {
                        sums.push(groups[i]);
                    }
                }
                sums.push(total);
                var res = {
                    rows: rows,
                    sums: sums
                };
                this.cacheTarget.set(cacheID, res);
                return res;
            }
        },
        methods: {
            getTooltip: function (item) {
                if (item[2] === 0) {
                    return null;
                }
                var hits = item[0] + " out of " + item[1] + " hits";
                var gain;
                if (item[3] < 0) {
                  gain = "Damage Done: ";         
                } else {               
                  gain = "Pure Damage: ";
                }
                gain += Math.round(1000.0*item[2])/1000.0;
                return hits + "<br>" + gain;   
            },
            getCellValue: function (item) {
                if (item[2] === 0) {
                    return '-';
                }
                if (item[3] < 0) {
                   return 'Tooltip';
                }
                var damageIncrease = Math.round(1000 * 100 * (item[3] / (item[3] - item[2]) - 1.0)) / 1000;
                if (Math.abs(damageIncrease) < 1e-6 || isNaN(damageIncrease)) {
                    return "-";
                }
                return damageIncrease + '%';
            }
        },
        mounted() {
            initTable("#"+this.id, 1, "asc");
        },
        updated() {
            updateTable("#" + this.id);
        },
    });
};/*jshint esversion: 6 */

var compileBuffStats = function () {
    Vue.component("personal-buff-table-component", {
        props: ['phaseindex', 'playerindex'],
        template: `<div>    <ul class="nav nav-pills d-flex flex-row justify-content-center mt-2 mb-2">        <li v-for="base in bases" class="nav-item">            <a class="nav-link" @click="mode = base" :class="{active: mode === base}">{{ base }}</a>        </li>    </ul>    <div v-for="(spec, id) in orderedSpecs" class="mt-3 mb-3">        <div v-show="specToBase[spec.name] === mode">            <h3 class="text-center">{{ spec.name }}</h3>            <buff-table-component :target="null" :condition="false" :generation="false" :id="'persbuffs-stats-table' + '_' + spec.name"                :buffs="buffs[id]" :playerdata="data[id]" :sums="[]" :playerindex="playerindex"></buff-table-component>        </div>    </div></div>`,
        data: function () {
            return {
                bases: [],
                mode: "Warrior",
                cache: new Map(),
                specToBase: specToBase
            };
        },
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            orderedSpecs: function () {
                var res = [];
                var aux = new Set();
                for (var i = 0; i < specs.length; i++) {
                    var spec = specs[i];
                    var pBySpec = [];
                    for (var j = 0; j < logData.players.length; j++) {
                        if (logData.players[j].profession === spec && logData.phases[0].persBuffStats[j].data.length > 0) {
                            pBySpec.push(j);
                        }
                    }
                    if (pBySpec.length) {
                        aux.add(specToBase[spec]);
                        res.push({
                            ids: pBySpec,
                            name: spec
                        });
                    }
                }
                this.bases = [];
                var _this = this;
                aux.forEach(function (value, value2, set) {
                    _this.bases.push(value);
                });
                this.mode = this.bases[0];
                return res;
            },
            data: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var res = [];
                for (var i = 0; i < this.orderedSpecs.length; i++) {
                    var spec = this.orderedSpecs[i];
                    var dataBySpec = [];
                    for (var j = 0; j < spec.ids.length; j++) {
                        dataBySpec.push({
                            player: logData.players[spec.ids[j]],
                            data: this.phase.persBuffStats[spec.ids[j]]
                        });
                    }
                    res.push(dataBySpec);
                }
                this.cache.set(this.phaseindex, res);
                return res;
            },
            buffs: function () {
                var res = [];
                for (var i = 0; i < this.orderedSpecs.length; i++) {
                    var spec = this.orderedSpecs[i];
                    var data = [];
                    for (var j = 0; j < logData.persBuffs[spec.name].length; j++) {
                        data.push(findSkill(true, logData.persBuffs[spec.name][j]));
                    }
                    res.push(data);
                }
                return res;
            }
        }
    });

    Vue.component("buff-stats-component", {
        props: ['datatypes', 'datatype', 'phaseindex', 'playerindex'],
        template: `<div>    <div class="d-flex flex-row justify-content-center mt-2 mb-2">        <ul class="nav nav-pills d-flex flex-row justify-content-center">            <li class="nav-item">                <a class="nav-link" @click="mode = 0" :class="{active: mode === 0}">Uptime</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="mode = 1" :class="{active: mode === 1 }">Generation Self</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="mode = 2" :class="{active: mode === 2 }">Generation Group</a>            </li>            <li v-if="!singleGroup" class="nav-item">                <a class="nav-link" @click="mode = 3" :class="{active: mode === 3 }">Generation Off-Group</a>            </li>            <li v-if="!singleGroup" class="nav-item">                <a class="nav-link" @click="mode = 4" :class="{active: mode === 4 }">Generation Squad</a>            </li>        </ul>    </div>    <keep-alive>        <buff-table-component v-if="datatype === datatypes.boonTable" :key="'boon-stats-table'" :condition="false"            :generation="mode > 0" :id="'boon-stats-table'" :buffs="boons" :playerdata="buffData.boonsData[mode]"             :sums="mode === 0 ? buffData.boonsData[5] : []":playerindex="playerindex">        </buff-table-component>        <buff-table-component v-if="datatype === datatypes.offensiveBuffTable" :key="'offensivebuff-stats-table'"            :condition="false" :generation="mode > 0" :id="'offensivebuff-stats-table'" :buffs="offs" :playerdata="buffData.offsData[mode]"            :sums="mode === 0 ? buffData.offsData[5] : []" :playerindex="playerindex">        </buff-table-component>        <buff-table-component v-if="datatype === datatypes.defensiveBuffTable" :key="'defensivebuff-stats-table'"            :condition="false" :generation="mode > 0" :id="'defensivebuff-stats-table'" :buffs="defs" :playerdata="buffData.defsData[mode]"            :sums="mode === 0 ? buffData.defsData[5] : []" :playerindex="playerindex">        </buff-table-component>    </keep-alive></div>`,
        data: function () {
            return {
                mode: 0,
                cache: new Map()
            };
        },
        computed: {
            singleGroup: function() {
               return logData.singleGroup;
            },
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            boons: function () {
                var data = [];
                for (var i = 0; i < logData.boons.length; i++) {
                    data[i] = findSkill(true, logData.boons[i]);
                }
                return data;
            },
            offs: function () {
                var data = [];
                for (var i = 0; i < logData.offBuffs.length; i++) {
                    data[i] = findSkill(true, logData.offBuffs[i]);
                }
                return data;
            },
            defs: function () {
                var data = [];
                for (var i = 0; i < logData.defBuffs.length; i++) {
                    data[i] = findSkill(true, logData.defBuffs[i]);
                }
                return data;
            },
            buffData: function () {
                if (this.cache.has(this.phaseindex)) {
                    return this.cache.get(this.phaseindex);
                }
                var getData = function (stats, genself, gengroup, genoffgr, gensquad) {
                    var uptimes = [],
                        gens = [],
                        gengr = [],
                        genoff = [],
                        gensq = [];
                    var avg = [],
                        gravg = [],
                        totalavg = [];
                    var grcount = [],
                        totalcount = 0;
                    var grBoonAvg = [],
                        totalBoonAvg = 0;
                    var i, k;
                    for (i = 0; i < logData.players.length; i++) {
                        var player = logData.players[i];
                        if (player.isConjure) {
                            continue;
                        }
                        uptimes.push({
                            player: player,
                            data: stats[i]
                        });
                        gens.push({
                            player: player,
                            data: genself[i]
                        });
                        gengr.push({
                            player: player,
                            data: gengroup[i]
                        });
                        genoff.push({
                            player: player,
                            data: genoffgr[i]
                        });
                        gensq.push({
                            player: player,
                            data: gensquad[i]
                        });
                        if (!gravg[player.group]) {
                            gravg[player.group] = [];
                            grcount[player.group] = 0;
                            grBoonAvg[player.group] = 0;
                        }
                        totalcount++;
                        totalBoonAvg += stats[i].avg;
                        grBoonAvg[player.group] += stats[i].avg;
                        grcount[player.group]++;
                        for (var j = 0; j < stats[i].data.length; j++) {
                            totalavg[j] = (totalavg[j] || 0) + (stats[i].data[j][0] || 0);
                            gravg[player.group][j] = (gravg[player.group][j] || 0) + (stats[i].data[j][0] || 0);
                        }
                    }
                    for (i = 0; i < gravg.length; i++) {
                        if (gravg[i]) {
                            for (k = 0; k < gravg[i].length; k++) {
                                gravg[i][k] = Math.round(100 * gravg[i][k] / grcount[i]) / 100;
                            }
                            avg.push({
                                name: "Group " + i,
                                data: gravg[i],
                                avg: Math.round(100 * grBoonAvg[i] / grcount[i]) / 100
                            });
                        }
                    }
                    for (k = 0; k < totalavg.length; k++) {
                        totalavg[k] = Math.round(100 * totalavg[k] / totalcount) / 100;
                    }
                    avg.push({
                        name: "Total",
                        data: totalavg,
                        avg: Math.round(100 * totalBoonAvg / totalcount) / 100
                    });
                    return [uptimes, gens, gengr, genoff, gensq, avg];
                };
                var res = {
                    boonsData: getData(this.phase.boonStats, this.phase.boonGenSelfStats,
                        this.phase.boonGenGroupStats, this.phase.boonGenOGroupStats, this.phase.boonGenSquadStats),
                    offsData: getData(this.phase.offBuffStats, this.phase.offBuffGenSelfStats,
                        this.phase.offBuffGenGroupStats, this.phase.offBuffGenOGroupStats, this.phase.offBuffGenSquadStats),
                    defsData: getData(this.phase.defBuffStats, this.phase.defBuffGenSelfStats,
                        this.phase.defBuffGenGroupStats, this.phase.defBuffGenOGroupStats, this.phase.defBuffGenSquadStats)
                };
                this.cache.set(this.phaseindex, res);
                return res;
            }
        },
    });
};
/*jshint esversion: 6 */

var compileGraphs = function () {
    Vue.component("graph-stats-component", {
        props: ["activetargets", "phaseindex", 'playerindex', 'light'],
        template: `<div>    <div>        <ul v-if="!wvw" class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">Total</a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">Target</a>            </li>            <li>                <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Cleave</a>            </li>        </ul>    </div>    <keep-alive>        <dps-graph-component v-for="(phase, id) in phases" :key="id" v-if="id === phaseindex"            :activetargets="activetargets" :mode="mode" :phaseindex="id" :playerindex="playerindex" :light="light">        </dps-graph-component>    </keep-alive></div>`,
        data: function () {
            return {
                wvw: !!logData.wvw,
                mode: logData.wvw ? 0 : 1
            };
        },
        computed: {
            phases: function() {
                return logData.phases;
            }
        }
    });
    Vue.component("dps-graph-component", {
        props: ["activetargets", 'mode', 'phaseindex', 'playerindex', 'light'],
        template: `<div>    <ul class="nav nav-pills d-flex flex-row justify-content-center mt-2 mb-2">        <li class="nav-item">            <a class="nav-link" @click="dpsmode = 0" :class="{active: dpsmode === 0}">Full</a>        </li>        <li v-if="phase.end - phase.start > 10" class="nav-item">            <a class="nav-link" @click="dpsmode = 1" :class="{active: dpsmode === 1}">10s</a>        </li>        <li v-if="phase.end - phase.start > 30" class="nav-item">            <a class="nav-link" @click="dpsmode = 2" :class="{active: dpsmode === 2}">30s</a>        </li>        <li v-if="phase.subPhases" class="nav-item">            <a class="nav-link" @click="dpsmode = 3" :class="{active: dpsmode === 3}">Phase</a>        </li>    </ul>    <h3 class="text-center mt-2 mb-2">{{graphname}}</h3>    <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component></div>`,
        data: function () {
            return {
                dpsmode: 0,
                layout: {},
                data: [],
                dpsCache: new Map(),
                dataCache: new Map()
            };
        },
        created: function () {
            // layout - constant during whole lifetime
            var i, j;
            var textColor = this.light ? '#495057' : '#cccccc';
            this.layout = {
                yaxis: {
                    title: 'DPS',
                    fixedrange: false,
                    rangemode: 'tozero',
                    gridcolor: textColor,
                    color: textColor
                },
                xaxis: {
                    title: 'Time(sec)',
                    color: textColor,
                    gridcolor: textColor,
                    xrangeslider: {}
                },
                hovermode: 'compare',
                legend: {
                    orientation: 'h',
                    font: {
                        size: 15
                    },
                    y: -0.1
                },
                font: {
                    color: textColor
                },
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                displayModeBar: false,
                shapes: [],
                annotations: [],
                autosize: true,
                width: 1100,
                height: 800,
                datarevision: new Date().getTime(),
            };
            computePhaseMarkups(this.layout.shapes, this.layout.annotations, this.phase, textColor);
            // constant part of data
            // dps
            var data = this.data;
            var player;
            for (i = 0; i < logData.players.length; i++) {
                var pText = [];
                player = logData.players[i];
                for (j = 0; j < this.graph.players[i].total.length; j++) {
                    pText.push(player.name);
                }
                data.push({
                    x: this.phase.times,
                    y: [],
                    mode: 'lines',
                    line: {
                        shape: 'spline',
                        color: player.colTarget,
                        width: i === this.playerindex ? 5 : 2
                    },
                    text: pText,
                    hoverinfo: 'y+text+x',
                    name: player.name + ' DPS',
                });
            }
            data.push({
                x: this.phase.times,
                mode: 'lines',
                line: {
                    shape: 'spline'
                },
                hoverinfo: 'name+y+x',
                visible: 'legendonly',
                name: 'All Player Dps'
            });
            // targets health
            computeTargetHealthData(this.graph, logData.targets, this.phase, this.data, null, this.phase.times);
            // mechanics
            for (i = 0; i < graphData.mechanics.length; i++) {
                var mech = graphData.mechanics[i];
                var mechData = logData.mechanicMap[i];
                var chart = {
                    x: [],
                    mode: 'markers',
                    visible: mech.visible ? null : 'legendonly',
                    type: 'scatter',
                    marker: {
                        symbol: mech.symbol,
                        color: mech.color,
                        size: mech.size ? mech.size : 15
                    },
                    text: [],
                    name: mechData.name,
                    hoverinfo: 'text+x'
                };
                var time, pts, k;
                if (mechData.enemyMech) {
                    for (j = 0; j < mech.points[this.phaseindex].length; j++) {
                        pts = mech.points[this.phaseindex][j];
                        var tarId = this.phase.targets[j];
                        if (tarId >= 0) {
                            var target = logData.targets[tarId];
                            for (k = 0; k < pts.length; k++) {
                                time = pts[k];
                                chart.x.push(time);
                                chart.text.push(time + 's: ' + target.name);
                            }
                        } else {
                            for (k = 0; k < pts.length; k++) {
                                time = pts[k][0];
                                chart.x.push(time);
                                chart.text.push(time + 's: ' + pts[k][1]);
                            }
                        }
                    }
                } else {
                    for (j = 0; j < mech.points[this.phaseindex].length; j++) {
                        pts = mech.points[this.phaseindex][j];
                        player = logData.players[j];
                        for (k = 0; k < pts.length; k++) {
                            time = pts[k];
                            chart.x.push(time);
                            chart.text.push(time + 's: ' + player.name);
                        }
                    }
                }
                data.push(chart);
            }
        },
        watch: {
            playerindex: {
                handler: function () {
                    for (var i = 0; i < logData.players.length; i++) {
                        this.data[i].line.width = i === this.playerindex ? 5 : 2;
                    }
                    this.layout.datarevision = new Date().getTime();
                },
                deep: true
            },
            light: {
                handler: function () {
                    var textColor = this.light ? '#495057' : '#cccccc';
                    this.layout.yaxis.gridcolor = textColor;
                    this.layout.yaxis.color = textColor;
                    this.layout.xaxis.gridcolor = textColor;
                    this.layout.xaxis.color = textColor;
                    this.layout.font.color = textColor;
                    for (var i = 0; i < this.layout.shapes.length; i++) {
                        this.layout.shapes[i].line.color = textColor;
                    }
                    this.layout.datarevision = new Date().getTime();
                }
            }
        },
        computed: {
            graphid: function () {
                return 'dpsgraph-' + this.phaseindex;
            },
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            graph: function() {
                return graphData.phases[this.phaseindex];
            },
            graphname: function () {
                var name = "DPS graph";
                name = (this.dpsmode === 0 ? "Full " : (this.dpsmode === 1 ? "10s " : (this.dpsmode === 2 ? "30s " : "Phase "))) + name;
                name = (this.mode === 0 ? "Total " : (this.mode === 1 ? "Target " : "Cleave ")) + name;
                return name;
            },
            computePhaseBreaks: function () {
                var res = [];
                if (this.phase.subPhases) {
                    for (var i = 0; i < this.phase.subPhases.length; i++) {
                        var subPhase = logData.phases[this.phase.subPhases[i]];
                        res[Math.floor(subPhase.start - this.phase.start)] = true;
                        res[Math.floor(subPhase.end - this.phase.start)] = true;
                    }
                }
                return res;
            },
            computeData: function () {
                this.layout.datarevision = new Date().getTime();
                var points = this.computeDPSRelatedData();
                var res = this.data;
                for (var i = 0; i < points.length; i++) {
                    res[i].y = points[i];
                }
                return res;
            }
        },
        methods: {
            computeDPS: function (lim, phasebreaks, cacheID) {
                var maxDPS = {
                    total: 0,
                    cleave: 0,
                    target: 0
                };
                var allDPS = {                   
                    total: [],
                    cleave: [],
                    target: []
                };
                var playerDPS = [];
                for (var i = 0; i < logData.players.length; i++) {
                    var data = computePlayerDPS(logData.players[i], this.graph.players[i], lim, phasebreaks, 
                            this.activetargets, cacheID + '-' + this.phaseindex, this.phase.needsLastPoint ? this.phase.end - this.phase.start : 0);
                    playerDPS.push(data.dps);
                    maxDPS.total = Math.max(maxDPS.total, data.maxDPS.total);
                    maxDPS.cleave = Math.max(maxDPS.cleave, data.maxDPS.cleave);
                    maxDPS.target = Math.max(maxDPS.target, data.maxDPS.target);
                    for (var j = 0; j < data.dps.total.length; j++) {
                        allDPS.total[j] = (allDPS.total[j] || 0) + data.dps.total[j];
                        allDPS.cleave[j] = (allDPS.cleave[j] || 0) + data.dps.cleave[j];
                        allDPS.target[j] = (allDPS.target[j] || 0) + data.dps.target[j];
                    }
                }
                
                return {
                    allDPS: allDPS,
                    playerDPS: playerDPS,
                    maxDPS: maxDPS,
                };
            },
            computeDPSData: function () {
                var cacheID = this.dpsmode + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.dpsCache.has(cacheID)) {
                    return this.dpsCache.get(cacheID);
                }
                var res;
                if (this.dpsmode < 3) {
                    var lim = (this.dpsmode === 0 ? 0 : (this.dpsmode === 1 ? 10 : 30));
                    res = this.computeDPS(lim, null, cacheID);
                } else {
                    res = this.computeDPS(0, this.computePhaseBreaks, cacheID);
                }
                this.dpsCache.set(cacheID, res);
                return res;
            },
            computeDPSRelatedData: function () {
                var cacheID = this.dpsmode + '-' + this.mode + '-';
                var i, j;
                cacheID += getTargetCacheID(this.activetargets);
                if (this.dataCache.has(cacheID)) {
                    return this.dataCache.get(cacheID);
                }
                var res = [];
                var dpsData = this.computeDPSData();
                var offset = 0;
                for (i = 0; i < logData.players.length; i++) {
                    var pDPS = dpsData.playerDPS[i];
                    res[offset++] = (this.mode === 0 ? pDPS.total : (this.mode === 1 ? pDPS.target : pDPS.cleave));
                }
                res[offset++] = (this.mode === 0 ? dpsData.allDPS.total : (this.mode === 1 ? dpsData.allDPS.target : dpsData.allDPS.cleave));
                var maxDPS = (this.mode === 0 ? dpsData.maxDPS.total : (this.mode === 1 ? dpsData.maxDPS.target : dpsData.maxDPS.cleave));
                var hps = [];
                for (i = 0; i < this.graph.targets.length; i++) {
                    var health = this.graph.targets[i].health;
                    var hpPoints = [];
                    for (j = 0; j < health.length; j++) {
                        hpPoints[j] = health[j] * maxDPS / 100.0;
                    }
                    hps[i] = hpPoints;
                    res[offset++] = hpPoints;
                }
                for (i = 0; i < graphData.mechanics.length; i++) {
                    var mech = graphData.mechanics[i];
                    var mechData = logData.mechanicMap[i];
                    var chart = [];
                    res[offset++] = chart;
                    var time, pts, k, ftime, y, yp1;
                    if (mechData.enemyMech) {
                        for (j = 0; j < mech.points[this.phaseindex].length; j++) {
                            pts = mech.points[this.phaseindex][j];
                            var tarId = this.phase.targets[j];
                            if (tarId >= 0) {
                                for (k = 0; k < pts.length; k++) {
                                    time = pts[k];
                                    ftime = Math.floor(time);
                                    y = hps[j][ftime];
                                    yp1 = hps[j][ftime + 1];
                                    chart.push(this.interpolatePoint(ftime, ftime + 1, y, yp1, time));
                                }
                            } else {
                                for (k = 0; k < pts.length; k++) {
                                    chart.push(maxDPS * 0.5);
                                }
                            }
                        }
                    } else {
                        for (j = 0; j < mech.points[this.phaseindex].length; j++) {
                            pts = mech.points[this.phaseindex][j];
                            for (k = 0; k < pts.length; k++) {
                                time = pts[k];
                                ftime = Math.floor(time);
                                y = res[j][ftime];
                                yp1 = res[j][ftime + 1];
                                chart.push(this.interpolatePoint(ftime, ftime + 1, y, yp1, time));
                            }
                        }
                    }
                }
                this.dataCache.set(cacheID, res);
                return res;
            },
            interpolatePoint: function (x1, x2, y1, y2, x) {
                if (typeof y2 !== "undefined") {
                    return y1 + (y2 - y1) / (x2 - x1) * (x - x1);
                } else {
                    return y1;
                }
            }
        }
    });
};/*jshint esversion: 6 */

var compileMechanics = function () {
    Vue.component("mechanics-stats-component", {
        props: ["phaseindex", "playerindex"],
        template: `<div>    <table v-if="playerMechHeader.length > 0" class="table table-sm table-striped table-hover" cellspacing="0" id="playermechs">        <thead>            <tr>                <th width="30px">Sub</th>                <th width="30px"></th>                <th class="text-left">Player</th>                <th v-for="mech in playerMechHeader" :data-original-title="mech.description">                    {{ mech.shortName}}                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in playerMechRows" :class="{active: row.player.id === playerindex}">                <td>{{row.player.group}}</td>                <td :data-original-title="row.player.profession">                    <img :src="row.player.icon" :alt="row.player.profession" class="icon">                    <span style="display:none">{{row.player.profession}}</span>                </td>                <td class="text-left">{{row.player.name}}</td>                <td v-for="mech in row.mechs" :data-original-title="mech[1] !== mech[0] ? mech[1] + ' times (multi hits)' : false">                    {{ mech[0] ? mech[0] : '-'}}                </td>            </tr>        </tbody>    </table>    <table v-if="enemyMechHeader.length > 0" class="table table-sm table-striped table-hover" cellspacing="0" id="enemymechs">        <thead>            <tr>                <th class="text-left">Enemy</th>                <th v-for="mech in enemyMechHeader" :data-original-title="mech.description">                    {{ mech.shortName}}                </th>            </tr>        </thead>        <tbody>            <tr v-for="row in enemyMechRows">                <td class="text-left">{{row.enemy}}</td>                <td v-for="mech in row.mechs" :data-original-title="mech[1] !== mech[0] ? mech[1] + ' times (multi hits)' : false">                    {{mech[0] ? mech[0] : '-'}}                </td>            </tr>        </tbody>    </table></div>`,
        data: function () {
            return {
                cacheP: new Map(),
                cacheE: new Map()
            };
        },
        mounted() {
            initTable("#playermechs", 0, "asc");
            //
            if (this.enemyMechHeader.length) {
                initTable("#enemymechs", 0, "asc");
            }
        },
        updated() {
            updateTable("#playermechs");
            //
            if (this.enemyMechHeader.length) {
                updateTable("#enemymechs");
            }
        },
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            playerMechHeader: function () {
                var playerMechanics = [];
                for (var i = 0; i < logData.mechanicMap.length; i++) {
                    var mech = logData.mechanicMap[i];
                    if (mech.playerMech) {
                        playerMechanics.push(mech);
                    }
                }
                return playerMechanics;
            },
            playerMechRows: function () {
                if (this.cacheP.has(this.phaseindex)) {
                    return this.cacheP.get(this.phaseindex);
                }
                var players = logData.players;
                var rows = [];
                for (var i = 0; i < players.length; i++) {
                    var player = players[i];
                    if (player.isConjure) {
                        continue;
                    }
                    rows.push({
                        player: player,
                        mechs: this.phase.mechanicStats[i]
                    });
                }
                this.cacheP.set(this.phaseindex, rows);
                return rows;
            },
            enemyMechHeader: function () {
                var enemyMechanics = [];
                for (var i = 0; i < logData.mechanicMap.length; i++) {
                    var mech = logData.mechanicMap[i];
                    if (mech.enemyMech) {
                        enemyMechanics.push(mech);
                    }
                }
                return enemyMechanics;
            },
            enemyMechRows: function () {
                if (this.cacheE.has(this.phaseindex)) {
                    return this.cacheE.get(this.phaseindex);
                }
                var enemies = logData.enemies;
                var rows = [];
                for (var i = 0; i < enemies.length; i++) {
                    var enemy = enemies[i];
                    rows.push({
                        enemy: enemy.name,
                        mechs: this.phase.enemyMechanicStats[i]
                    });
                }
                this.cacheE.set(this.phaseindex, rows);
                return rows;
            }
        }
    });
};/*jshint esversion: 6 */


function computeTargetDPS(target, damageData,lim, phasebreaks, cacheID, lastTime) {
    if (target.dpsGraphCache.has(cacheID)) {
        return target.dpsGraphCache.get(cacheID);
    }
    var totalDamage = 0;
    var totalDPS = [0];
    var maxDPS = 0;
    var limID = 0, j;
    var end = damageData.length;
    if (lastTime > 0) {
        end--;
    }
    for (j = 1; j < end; j++) {
        if (lim > 0) {
            limID = Math.max(j - lim, 0);
        } else if (phasebreaks && phasebreaks[j-1]) {
            limID = j;
        }
        var div = Math.max(j - limID, 1);
        totalDamage = damageData[j] - damageData[limID];
        totalDPS[j] = Math.round(totalDamage / (div));
        maxDPS = Math.max(maxDPS, totalDPS[j]);
    }   
    // last point management
    if (lastTime > 0) {
        if (lim > 0) {
            limID = Math.round(Math.max(lastTime - lim, 0));
        } else if (phasebreaks && phasebreaks[j-1]) {
            limID = j;
        }
        totalDamage = damageData[j] - damageData[limID];
        totalDPS[j] = Math.round(totalDamage / (lastTime - limID));
        maxDPS = Math.max(maxDPS, totalDPS[j]);
    }
    if (maxDPS < 1e-6) {
        maxDPS = 10;
    }
    var res = {
        dps: totalDPS,
        maxDPS: maxDPS
    };
    target.dpsGraphCache.set(cacheID, res);
    return res;
}

var compileTargetTab = function () {
    // base
    Vue.component("buff-stats-target-component", {
        props: ['phaseindex', 'playerindex', 'targetindex'],
        template: `<div>    <div>        <h3 class="text-center">Conditions</h3>        <buff-table-component :condition="true" :generation="true" :id="'condition-stats-table-' + target.id" :buffs="conditions"            :playerdata="condiData" :sums="condiSums" :playerindex="playerindex"></buff-table-component>    </div>    <div v-show="hasBoons" class="mt-2">        <h3 class="text-center">Boons</h3>        <buff-table-component :condition="false" :generation="false" :id="'buff-stats-table-' + target.id" :buffs="boons"            :playerdata="boonData" :sums="[]"></buff-table-component>    </div></div>`,
        data: function () {
            return {
                cacheCondi: new Map(),
                cacheCondiSums: new Map(),
                cacheBoon: new Map()
            };
        },
        computed: {
            boons: function() {
                var data = [];
                for (var i = 0; i < logData.boons.length; i++) {
                    data[i] = findSkill(true, logData.boons[i]);
                }
                return data;
            },
            conditions: function() {
                var data = [];
                for (var i = 0; i < logData.conditions.length; i++) {
                    data[i] = findSkill(true, logData.conditions[i]);
                }
                return data;
            },
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            target: function() {
                return logData.targets[this.targetindex];
            },
            targetPhaseIndex: function () {
                return this.phase.targets.indexOf(this.targetindex);
            },
            hasBoons: function () {
                return this.phase.targetsBoonTotals[this.targetPhaseIndex];
            },
            condiData: function () {
                if (this.cacheCondi.has(this.phaseindex)) {
                    return this.cacheCondi.get(this.phaseindex);
                }
                var res = [];
                var i;
                if (this.targetPhaseIndex === -1) {
                    for (i = 0; i < logData.players.length; i++) {
                        res.push({
                            player: logData.players[i],
                            data: {
                                avg: 0.0,
                                data: []
                            }
                        });
                    }
                } else {
                    for (i = 0; i < logData.players.length; i++) {
                        res.push({
                            player: logData.players[i],
                            data: this.phase.targetsCondiStats[this.targetPhaseIndex][i]
                        });
                    }
                }
                this.cacheCondi.set(this.phaseindex, res);
                return res;
            },
            condiSums: function () {
                if (this.cacheCondiSums.has(this.phaseindex)) {
                    return this.cacheCondiSums.get(this.phaseindex);
                }
                var res = [];
                if (this.targetPhaseIndex === -1) {
                    res.push({
                        icon: this.target.icon,
                        name: this.target.name,
                        avg: 0,
                        data: []
                    });
                } else {
                    var targetData = this.phase.targetsCondiTotals[this.targetPhaseIndex];
                    res.push({
                        icon: this.target.icon,
                        name: this.target.name,
                        avg: targetData.avg,
                        data: targetData.data
                    });
                }
                this.cacheCondiSums.set(this.phaseindex, res);
                return res;
            },
            boonData: function () {
                if (this.cacheBoon.has(this.phaseindex)) {
                    return this.cacheBoon.get(this.phaseindex);
                }
                var res = [];
                if (this.targetPhaseIndex === -1 || !this.hasBoons) {
                    res.push({
                        player: this.target,
                        data: {
                            avg: 0.0,
                            data: []
                        }
                    });
                } else {
                    var targetData = this.phase.targetsBoonTotals[this.targetPhaseIndex];
                    res.push({
                        player: this.target,
                        data: targetData
                    });
                }
                this.cacheBoon.set(this.phaseindex, res);
                return res;
            }
        }
    });

    Vue.component('dmgdist-target-component', {
        props: ['targetindex',
            'phaseindex'
        ],
        template: `<div>    <div v-if="target.minions.length > 0">        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{target.name}}</a>            </li>            <li v-for="(minion, mindex) in target.minions">                <a class="nav-link" :class="{active: distmode === mindex}" @click="distmode = mindex">{{minion.name}}</a>            </li>        </ul>    </div>    <damagedist-table-component :dmgdist="dmgdist" :tableid="'dmgdist-target-' + targetindex" :actor="actor" :isminion="distmode>=0" :phaseindex="phaseindex"></damagedist-table-component></div>`,
        data: function () {
            return {
                distmode: -1
            };
        },
        computed: {
            target: function() {
                return logData.targets[this.targetindex];
            },
            actor: function () {
                if (this.distmode === -1) {
                    return this.target;
                }
                return this.target.minions[this.distmode];
            },
            dmgdist: function () {
                if (this.distmode === -1) {
                    return this.target.details.dmgDistributions[this.phaseindex];
                }
                return this.target.details.minions[this.distmode].dmgDistributions[this.phaseindex];
            }
        },
    });
    // tab
    Vue.component("target-tab-component", {
        props: ["phaseindex", "playerindex", 'targetindex', 'mode', 'light'],
        template: `<div>    <keep-alive>        <dmgdist-target-component v-if="mode === 0" :key="'dist' + targetindex" :phaseindex="phaseindex"            :targetindex="targetindex"></dmgdist-target-component>        <dmgtaken-component v-if="mode === 1" :actor="target" :key="'taken' + targetindex" :tableid="'dmgtaken-target-'+targetindex"            :phaseindex="phaseindex"></dmgtaken-component>        <target-graph-tab-component v-for="(ph, id) in phases" v-if="mode === 2 && id === phaseindex" :key="id" :targetindex="targetindex" :phaseindex="id"            :light="light"></target-graph-tab-component>        <buff-stats-target-component v-if="mode === 3" :key="'buffs' + targetindex" :targetindex="targetindex"            :phaseindex="phaseindex" :playerindex="playerindex"></buff-stats-target-component>    </keep-alive></div>`,
        computed: {
            phases: function() {
                return logData.phases;
            },
            target: function() {
                return logData.targets[this.targetindex];
            }
        }
    });
    // stats
    Vue.component("target-stats-component", {
        props: ["playerindex", "phaseindex", 'light', "simplephase"],
        template: `<div>    <ul v-if="phaseTargets.length > 1" class=" nav nav-tabs">        <li v-for="target in phaseTargets">            <a class="nav-link" :class="{active: simplephase.focus === target.id}" @click="simplephase.focus = target.id">                {{target.name}}            </a>        </li>    </ul>    <div v-for="target in phaseTargets" v-show="simplephase.focus === target.id">        <div class="d-flex flex-row justify-content-center align-items-center">            <div class="d-flex flex-column justify-content-center align-items-center">                <img :alt="target.name" class="icon-lg mt-2" :src="target.icon">                <target-data-component :targetid="target.id"></target-data-component>            </div>            <h3 class="text-center mt-2">{{target.name}}</h3>        </div>    </div>    <ul class="nav nav-tabs">        <li>            <a class="nav-link" :class="{active: mode === 0}" @click="mode = 0">                Damage                Distribution            </a>        </li>        <li>            <a class="nav-link" :class="{active: mode === 1}" @click="mode = 1">                Damage                Taken            </a>        </li>        <li>            <a class="nav-link" :class="{active: mode === 2}" @click="mode = 2">Graph</a>        </li>        <li>            <a class="nav-link" :class="{active: mode === 3}" @click="mode = 3">Buff Status</a>        </li>    </ul>    <keep-alive>        <target-tab-component v-for="target in targets" :key="target.id" v-if="simplephase.focus === target.id"            :targetindex="target.id" :phaseindex="phaseindex" :playerindex="playerindex"             :mode="mode" :light="light"></target-tab-component>    </keep-alive></div>`,
        data: function () {
            return {
                mode: 0
            };
        },
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            targets: function() {
                return logData.targets;
            },
            phaseTargets: function () {
                var res = [];
                for (var i = 0; i < this.phase.targets.length; i++) {
                    var tar = logData.targets[this.phase.targets[i]];
                    res.push(tar);
                }
                if (this.simplephase.focus === -1) {
                    this.simplephase.focus = res[0] ? res[0].id : -1;
                }
                return res;
            }
        }
    });

    Vue.component("target-graph-tab-component", {
        props: ["targetindex", "phaseindex", 'light'],
        data: function () {
            return {
                dpsmode: 0,
                layout: {},
                data: [],
                dpsCache: new Map(),
                dataCache: new Map(),
                targetOffset: 0
            };
        },
        watch: {
            light: {
                handler: function () {
                    var textColor = this.light ? '#495057' : '#cccccc';
                    this.layout.yaxis.gridcolor = textColor;
                    this.layout.yaxis.color = textColor;
                    this.layout.yaxis2.gridcolor = textColor;
                    this.layout.yaxis2.color = textColor;
                    this.layout.yaxis3.gridcolor = textColor;
                    this.layout.yaxis3.color = textColor;
                    this.layout.xaxis.gridcolor = textColor;
                    this.layout.xaxis.color = textColor;
                    this.layout.font.color = textColor;
                    for (var i = 0; i < this.layout.shapes.length; i++) {
                        this.layout.shapes[i].line.color = textColor;
                    }
                    this.layout.datarevision = new Date().getTime();
                }
            }
        },
        created: function () {
            var images = [];
            this.targetOffset += computeRotationData(this.target.details.rotation[this.phaseindex], images, this.data);
            var oldOffset = this.targetOffset;
            this.targetOffset += computeBuffData(this.target.details.boonGraph[this.phaseindex], this.data);
            var dpsY = oldOffset === this.targetOffset ? 'y2' : 'y3';
            {
                var health = this.graph.targets[this.phaseTargetIndex].health;
                var hpTexts = [];
                for (var j = 0; j < health.length; j++) {
                    hpTexts[j] = health[j] + "% hp";
                }
                var res = {
                    x: this.phase.times,
                    text: hpTexts,
                    mode: 'lines',
                    line: {
                        shape: 'spline',
                        dash: 'dashdot'
                    },
                    hoverinfo: 'text+x',
                    name: this.target.name + ' health',
                    yaxis: dpsY
                };
                this.data.push(res);
            }
            this.targetOffset++;
            this.data.push({
                x: this.phase.times,
                y: [],
                mode: 'lines',
                line: {
                    shape: 'spline'
                },
                yaxis: dpsY,
                hoverinfo: 'name+y+x',
                name: 'Total DPS'
            });
            this.layout = getActorGraphLayout(images, this.light ? '#495057' : '#cccccc');
            computePhaseMarkups(this.layout.shapes, this.layout.annotations, this.phase, this.light ? '#495057' : '#cccccc');
        },
        computed: {
            target: function() {
                return logData.targets[this.targetindex];
            },
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            graph: function() {
                return graphData.phases[this.phaseindex];
            },
            phaseTargetIndex: function () {
                return this.phase.targets.indexOf(this.targetindex);
            },
            graphid: function () {
                return "targetgraph-" + this.phaseTargetIndex + '-' + this.phaseindex;
            },
            graphname: function () {
                var name = "DPS graph";
                name = (this.dpsmode === 0 ? "Full " : (this.dpsmode === 1 ? "10s " : (this.dpsmode === 2 ? "30s " : "Phase "))) + name;
                return name;
            },
            computePhaseBreaks: function () {
                var res = [];
                if (this.phase.subPhases) {
                    for (var i = 0; i < this.phase.subPhases.length; i++) {
                        var subPhase = logData.phases[this.phase.subPhases[i]];
                        res[Math.floor(subPhase.start - this.phase.start)] = true;
                        res[Math.floor(subPhase.end - this.phase.start)] = true;
                    }
                }
                return res;
            },
            computeData: function () {
                this.layout.datarevision = new Date().getTime();
                var res = this.data;
                var data = this.computeDPSRelatedData();
                this.data[this.targetOffset].y = data[0];
                this.data[this.targetOffset - 1].y = data[1];
                return res;
            }
        },
        methods: {
            computeDPSData: function () {
                var cacheID = this.dpsmode;
                if (this.dpsCache.has(cacheID)) {
                    return this.dpsCache.get(cacheID);
                }
                //var before = performance.now();
                var res;
                var damageData = this.graph.targets[this.phaseTargetIndex].total;
                var lastTime = this.phase.needsLastPoint ? this.phase.end - this.phase.start : 0;
                if (this.dpsmode < 3) {
                    var lim = (this.dpsmode === 0 ? 0 : (this.dpsmode === 1 ? 10 : 30));
                    res = computeTargetDPS(this.target, damageData, lim, null, cacheID + '-' + this.phaseindex, lastTime);
                } else {
                    res = computeTargetDPS(this.target, damageData, 0, this.computePhaseBreaks, cacheID + '-' + this.phaseindex, lastTime);
                }
                this.dpsCache.set(cacheID, res);
                return res;
            },
            computeDPSRelatedData: function () {
                var cacheID = this.dpsmode;
                if (this.dataCache.has(cacheID)) {
                    return this.dataCache.get(cacheID);
                }
                var dpsData = this.computeDPSData();
                var res = [];
                res[0] = dpsData.dps;
                {
                    var health = this.graph.targets[this.phaseTargetIndex].health;
                    var hpPoints = [];
                    for (var j = 0; j < health.length; j++) {
                        hpPoints[j] = health[j] * dpsData.maxDPS / 100.0;
                    }
                    res[1] = hpPoints;
                }
                this.dataCache.set(cacheID, res);
                return res;
            },
        },
        template: `<div>    <ul class="nav nav-pills d-flex flex-row justify-content-center mt-5 mb-2">        <li class="nav-item">            <a class="nav-link" @click="dpsmode = 0" :class="{active: dpsmode === 0}">Full</a>        </li>        <li v-if="phase.end - phase.start > 10" class="nav-item">            <a class="nav-link" @click="dpsmode = 1" :class="{active: dpsmode === 1}">10s</a>        </li>        <li v-if="phase.end - phase.start > 30" class="nav-item">            <a class="nav-link" @click="dpsmode = 2" :class="{active: dpsmode === 2}">30s</a>        </li>        <li v-if="phase.subPhases" class="nav-item">            <a class="nav-link" @click="dpsmode = 3" :class="{active: dpsmode === 3}">Phase</a>        </li>    </ul>    <h3 class="text-center mt-2 mb-2">{{graphname}}</h3>    <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>    <rotation-legend-component></rotation-legend-component></div>`
    });
};
/*jshint esversion: 6 */

var compilePlayerTab = function () {
    // Base stuff
    Vue.component('dmgdist-player-component', {
        props: ['playerindex', 
            'phaseindex', 'activetargets'
        ],
        template: `<div>    <div v-if="player.minions.length > 0">        <ul class="nav nav-tabs">            <li>                <a class="nav-link" :class="{active: distmode === -1}" @click="distmode = -1">{{player.name}}</a>            </li>            <li v-for="(minion, mindex) in player.minions">                <a class="nav-link" :class="{active: distmode === mindex}" @click="distmode = mindex">{{minion.name}}</a>            </li>        </ul>    </div>    <div class="d-flex flex-row justify-content-center mt-1 mb-1">        <ul v-if="!wvw" class="nav nav-pills">            <li class="nav-item">                <a class="nav-link" @click="targetmode = 1" :class="{active: targetmode}">Target</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="targetmode = 0" :class="{active: !targetmode }">All</a>            </li>        </ul>    </div>    <damagedist-table-component :dmgdist="targetmode === 0 ? dmgdist : dmgdisttarget" :tableid="'dmgdist-' + playerindex"        :actor="actor" :isminion="distmode>=0" :istarget="targetmode === 1" :phaseindex="phaseindex"></damagedist-table-component></div>`,
        data: function () {
            return {
                distmode: -1,
                wvw: !!logData.wvw,
                targetmode: logData.wvw ? 0 : 1,
                cacheTarget: new Map()
            };
        },
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            player : function() {
                return logData.players[this.playerindex];
            },
            actor: function () {
                if (this.distmode === -1) {
                    return this.player;
                }
                return this.player.minions[this.distmode];
            },
            dmgdist: function () {
                if (this.distmode === -1) {
                    return this.player.details.dmgDistributions[this.phaseindex];
                }
                return this.player.details.minions[this.distmode].dmgDistributions[this.phaseindex];
            },
            dmgdisttarget: function () {
                var cacheID = this.phaseindex + '-' + this.distmode + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.cacheTarget.has(cacheID)) {
                    return this.cacheTarget.get(cacheID);
                }
                var dist = {
                    contributedDamage: 0,
                    totalDamage: 0,
                    distribution: [],
                };
                var rows = new Map();
                for (var i = 0; i < this.activetargets.length; i++) {
                    var targetid = this.activetargets[i];
                    var targetDist = this.distmode === -1 ?
                        this.player.details.dmgDistributionsTargets[this.phaseindex][targetid] :
                        this.player.details.minions[this.distmode].dmgDistributionsTargets[this.phaseindex][targetid];
                    dist.contributedDamage += targetDist.contributedDamage;
                    dist.totalDamage += targetDist.totalDamage;
                    var distribution = targetDist.distribution;
                    for (var k = 0; k < distribution.length; k++) {
                        var targetDistribution = distribution[k];
                        if (rows.has(targetDistribution[1])) {
                            var row = rows.get(targetDistribution[1]);
                            row[2] += targetDistribution[2];
                            if (row[3] < 0) {
                                row[3] = targetDistribution[3];
                            } else if (targetDistribution[3] >= 0) {
                                row[3] = Math.min(targetDistribution[3], row[3]);
                            }
                            row[4] = Math.max(targetDistribution[4], row[4]);
                            row[6] += targetDistribution[6];
                            row[7] += targetDistribution[7];
                            row[8] += targetDistribution[8];
                            row[9] += targetDistribution[9];
                        } else {
                            rows.set(targetDistribution[1], targetDistribution.slice(0));
                        }

                    }
                }
                rows.forEach(function (value, key, map) {
                    dist.distribution.push(value);
                });
                dist.contributedDamage = Math.max(dist.contributedDamage, 0);
                dist.totalDamage = Math.max(dist.totalDamage, 0);
                this.cacheTarget.set(cacheID, dist);
                return dist;
            }
        },
    });

    Vue.component("player-graph-tab-component", {
        props: ["playerindex", "phaseindex", "activetargets", "light"],
        data: function () {
            return {
                dpsmode: 0,
                layout: {},
                data: [],
                dpsCache: new Map(),
                dataCache: new Map(),
                playerOffset: 0
            };
        },
        watch: {
            light: {
                handler: function() {
                    var textColor = this.light ? '#495057' : '#cccccc';
                    this.layout.yaxis.gridcolor = textColor;
                    this.layout.yaxis.color = textColor;
                    this.layout.yaxis2.gridcolor = textColor;
                    this.layout.yaxis2.color = textColor;
                    this.layout.yaxis3.gridcolor = textColor;
                    this.layout.yaxis3.color = textColor;
                    this.layout.xaxis.gridcolor = textColor;
                    this.layout.xaxis.color = textColor;
                    this.layout.font.color = textColor;
                    for (var i = 0; i < this.layout.shapes.length; i++) {
                        this.layout.shapes[i].line.color = textColor;
                    }
                    this.layout.datarevision = new Date().getTime();
                }
            }
        },
        created: function () {
            var images = [];
            this.playerOffset += computeRotationData(this.player.details.rotation[this.phaseindex], images, this.data);
            var oldOffset = this.playerOffset;
            this.playerOffset += computeBuffData(this.player.details.boonGraph[this.phaseindex], this.data);
            var dpsY = oldOffset === this.playerOffset ? 'y2' : 'y3';
            this.playerOffset += computeTargetHealthData(this.graph, logData.targets, this.phase, this.data, dpsY, this.phase.times);
            this.data.push({
                x: this.phase.times,
                y: [],
                mode: 'lines',
                line: {
                    shape: 'spline',
                    color: this.player.colTotal,
                },
                yaxis: dpsY,
                hoverinfo: 'name+y+x',
                name: 'Total DPS'
            });
            if (!logData.wvw) {
                this.data.push({
                    x: this.phase.times,
                    y: [],
                    mode: 'lines',
                    line: {
                        shape: 'spline',
                        color: this.player.colTarget,
                    },
                    yaxis: dpsY,
                    hoverinfo: 'name+y+x',
                    name: 'Target DPS'
                });
                this.data.push({
                    x: this.phase.times,
                    y: [],
                    mode: 'lines',
                    line: {
                        shape: 'spline',
                        color: this.player.colCleave,
                    },
                    yaxis: dpsY,
                    hoverinfo: 'name+y+x',
                    name: 'Cleave DPS'
                });
            }
            this.layout = getActorGraphLayout(images, this.light ? '#495057' : '#cccccc');
            computePhaseMarkups(this.layout.shapes, this.layout.annotations, this.phase, this.light ? '#495057' : '#cccccc');
        },
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            player : function() {
                return logData.players[this.playerindex];
            },
            graph: function() {
                return graphData.phases[this.phaseindex];
            },
            graphid: function () {
                return "playergraph-" + this.playerindex + '-' + this.phaseindex;
            },
            graphname: function () {
                var name = "DPS graph";
                name = (this.dpsmode === 0 ? "Full " : (this.dpsmode === 1 ? "10s " : (this.dpsmode === 2 ? "30s " : "Phase "))) + name;
                return name;
            },
            computePhaseBreaks: function () {
                var res = [];
                if (this.phase.subPhases) {
                    for (var i = 0; i < this.phase.subPhases.length; i++) {
                        var subPhase = logData.phases[this.phase.subPhases[i]];
                        res[Math.floor(subPhase.start - this.phase.start)] = true;
                        res[Math.floor(subPhase.end - this.phase.start)] = true;
                    }
                }
                return res;
            },
            computeData: function () {
                this.layout.datarevision = new Date().getTime();
                var res = this.data;
                var data = this.computeDPSRelatedData();
                this.data[this.playerOffset].y = data[0];
                if (!logData.wvw) {
                    this.data[this.playerOffset + 1].y = data[1];
                    this.data[this.playerOffset + 2].y = data[2];
                }
                var offset = 3;
                for (var i = this.playerOffset - this.graph.targets.length; i < this.playerOffset; i++) {
                    this.data[i].y = data[offset++];
                }
                return res;
            }
        },
        methods: {
            computeDPSData: function () {
                var cacheID = this.dpsmode + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.dpsCache.has(cacheID)) {
                    return this.dpsCache.get(cacheID);
                }
                var data;
                var graphData = this.graph.players[this.playerindex];
                var lastTime = this.phase.needsLastPoint ? this.phase.end - this.phase.start : 0;
                if (this.dpsmode < 3) {
                    var lim = (this.dpsmode === 0 ? 0 : (this.dpsmode === 1 ? 10 : 30));
                    data = computePlayerDPS(this.player, graphData, lim, null, this.activetargets, cacheID + '-' + this.phaseindex, lastTime);
                } else {
                    data = computePlayerDPS(this.player, graphData, 0, this.computePhaseBreaks, this.activetargets, cacheID + '-' + this.phaseindex, lastTime);
                }
                var res = {
                    maxDPS: data.maxDPS.total,
                    playerDPS: data.dps
                };
                this.dpsCache.set(cacheID, res);
                return res;
            },
            computeDPSRelatedData: function () {
                var cacheID = this.dpsmode + '-';
                cacheID += getTargetCacheID(this.activetargets);
                if (this.dataCache.has(cacheID)) {
                    return this.dataCache.get(cacheID);
                }
                var offset = 0;
                var dpsData = this.computeDPSData();
                var res = [];
                res[offset++] = dpsData.playerDPS.total;
                res[offset++] = dpsData.playerDPS.target;
                res[offset++] = dpsData.playerDPS.cleave;
                for (var i = 0; i < this.graph.targets.length; i++) {
                    var health = this.graph.targets[i].health;
                    var hpPoints = [];
                    for (var j = 0; j < health.length; j++) {
                        hpPoints[j] = health[j] * dpsData.maxDPS / 100.0;
                    }
                    res[offset++] = hpPoints;
                }
                this.dataCache.set(cacheID, res);
                return res;
            },
        },
        template: `<div>    <ul class="nav nav-pills d-flex flex-row justify-content-center mt-1 mb-2">        <li class="nav-item">            <a class="nav-link" @click="dpsmode = 0" :class="{active: dpsmode === 0}">Full</a>        </li>        <li v-if="phase.end - phase.start > 10" class="nav-item">            <a class="nav-link" @click="dpsmode = 1" :class="{active: dpsmode === 1}">10s</a>        </li>        <li v-if="phase.end - phase.start > 30" class="nav-item">            <a class="nav-link" @click="dpsmode = 2" :class="{active: dpsmode === 2}">30s</a>        </li>        <li v-if="phase.subPhases" class="nav-item">            <a class="nav-link" @click="dpsmode = 3" :class="{active: dpsmode === 3}">Phase</a>        </li>    </ul>    <h3 class="text-center mt-2 mb-2">{{graphname}}</h3>    <graph-component :id="graphid" :layout="layout" :data="computeData"></graph-component>    <rotation-legend-component></rotation-legend-component></div>`
    });

    Vue.component("food-component", {
        props: ["phaseindex", "playerindex"],
        template: `<div class="mt-2">    <div v-if="data.start.length">        Started with:        <ul>            <li v-for="initial in data.start">                {{initial.name}} <img class="icon" :alt="initial.name" :src="initial.icon">                {{initial.stack > 1 ? "("+initial.stack+")" : ""}} ({{initial.duration}}                seconds remaining)            </li>        </ul>    </div>    <div v-if="data.refreshed.length">        In phase consumable updates:        <ul>            <li v-for="refresh in data.refreshed">                {{refresh.dimished ? 'suffered' : 'consumed'}} {{refresh.name}}                <img class="icon" :alt="refresh.name" :src="refresh.icon">                {{refresh.stack > 1 ? "("+refresh.stack+")" : ""}}                at {{round3(refresh.time - phase.start)}}s ({{refresh.duration}}                seconds)            </li>        </ul>    </div>    <div v-if="!data.refreshed.length && !data.start.length" class="text-center">        <h3>No consumable activity</h3>    </div></div>`,
        data: function () {
            return {
                cache: new Map()
            };
        },
        mixins: [roundingComponent],
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            food: function() {
                return logData.players[this.playerindex].details.food;
            },
            data: function () {
                if (this.cache.has(this.phase)) {
                    return this.cache.get(this.phase);
                }
                var res = {
                    start: [],
                    refreshed: []
                };
                for (var k = 0; k < this.food.length; k++) {
                    var foodData = this.food[k];
                    if (!foodData.name) {
                        var skill = findSkill(true, foodData.id);
                        foodData.name = skill.name;
                        foodData.icon = skill.icon;
                    }
                    if (foodData.time >= this.phase.start && foodData.time <= this.phase.end) {
                        if (foodData.time === 0) {
                            res.start.push(foodData);
                        } else {
                            res.refreshed.push(foodData);
                        }
                    }
                }
                this.cache.set(this.phase, res);
                return res;
            }
        }
    });

    Vue.component("simplerotation-component", {
        props: ["playerindex", "phaseindex"],
        template: `<div>    <div class="d-flex flex-row justify-content-center mt-1 mb-1">        <ul class="nav nav-pills">            <li class="nav-item">                <a class="nav-link" @click="autoattack = !autoattack" :class="{active: autoattack}">Show auto attacks</a>            </li>            <li class="nav-item">                <a class="nav-link" @click="small = !small" :class="{active: small}">Small icons</a>            </li>        </ul>    </div>    <span class="rot-skill" v-for="rota in rotation" :class="{'rot-swap': rota[1] === -2 ,'mb-1': rota[1] === -2, 'rot-small': small}"          v-show="!getSkill(rota[1]).aa || (getSkill(rota[1]).aa && autoattack)">        <img class="rot-icon" :class="{'rot-cancelled': rota[3] === 2, 'rot-animfull': rota[3] === 3, 'rot-unknown': rota[3] === 0}" :src="getSkill(rota[1]).icon"             :data-original-title="getSkill(rota[1]).name + ', Time: ' + rota[0] + 's, Dur: ' + rota[2] + 'ms'">    </span>    <div class="card mt-2">        <div class="card-body container">            <p><u>Outline</u></p>            <span class="mr-1" style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#00FF00; color:#000000">                Full After Cast            </span>            <span class="mr-1" style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#FF0000; color:#000000">                Interrupted            </span>            <span class="mr-1" style="padding: 2px; background-color:#999999; border-style:solid; border-width: 3px; border-color:#FFFF00; color:#000000">                Unknown            </span>        </div>    </div></div>`,
        data: function () {
            return {
                autoattack: true,
                small: false
            };
        },
        computed: {
            rotation: function() {
                return logData.players[this.playerindex].details.rotation[this.phaseindex];
            }
        },
        methods: {
            getSkill: function (id) {
                return findSkill(false, id);
            }
        }
    });

    Vue.component("deathrecap-component", {
        props: ["playerindex", "phaseindex"],
        template: `<div>    <div v-if="recaps">            <div v-for="index in phaseRecaps">                <h3 v-if="phaseRecaps.length > 1" class="text-center">                    Death #{{index + 1}}                </h3>                <div v-if="!recaps[index].toKill">                    <h3 class="text-center">Player was instantly killed after down</h3>                    <div class="text-center">                        Took {{data.totalDamage.down[index]}}                        damage to go into downstate in                        {{data.totalSeconds.down[index]}} seconds                    </div>                </div>                <div v-else-if="!recaps[index].toDown">                    <h3 class="text-center">Player was instantly killed</h3>                    <div class="text-center">                        Took {{data.totalDamage.kill[index]}}                        damage in {{data.totalSeconds.kill[index]}} seconds before                        dying                    </div>                </div>                <div v-else>                    <div class="text-center">                        Took {{data.totalDamage.down[index]}}                        damage to go into downstate in                        {{data.totalSeconds.down[index]}} seconds                    </div>                    <div class="text-center">                        Took {{data.totalDamage.kill[index]}}                        damage in {{data.totalSeconds.kill[index]}} seconds before                        dying afterwards                    </div>                </div>                <graph-component :id="'deathrecap-' + playerindex + '-' + index" :layout="data.layout" :data="[data.data[index]]"></graph-component>            </div>            <div v-show="phaseRecaps === null || phaseRecaps.length === 0">                                <h3 class="text-center">Player has never died during this phase</h3>            </div>    </div>    <div v-else>        <h3 class="text-center">Player has never died</h3>    </div></div>`,
        computed: {
            phase: function() {
                return logData.phases[this.phaseindex];
            },
            recaps: function() {
                return logData.players[this.playerindex].details.deathRecap;
            },
            data: function () {
                if (!this.recaps) {
                    return null;
                }
                var res = {
                    totalSeconds: {
                        down: [],
                        kill: []
                    },
                    totalDamage: {
                        down: [],
                        kill: []
                    },
                    data: [],
                    layout: {}
                };
                for (var i = 0; i < this.recaps.length; i++) {
                    var recap = this.recaps[i];
                    var data = {
                        y: [],
                        x: [],
                        type: 'bar',
                        text: [],
                        hoverinfo: 'y+text',
                        marker: {
                            color: []
                        }
                    };
                    var j, totalSec, totalDamage;
                    if (recap.toDown) {
                        totalSec = (recap.toDown[0][0] - recap.toDown[recap.toDown.length - 1][0]) / 1000;
                        totalDamage = 0;
                        for (j = recap.toDown.length - 1; j >= 0; j--) {
                            totalDamage += recap.toDown[j][2];
                            data.x.push(recap.toDown[j][0] / 1000);
                            data.y.push(recap.toDown[j][2]);
                            data.text.push(recap.toDown[j][3] + ' - ' + findSkill(recap.toDown[j][4], recap.toDown[j][1]).name);
                            data.marker.color.push('rgb(0,255,0,1)');
                        }
                        res.totalSeconds.down[i] = totalSec;
                        res.totalDamage.down[i] = totalDamage;
                    }
                    if (recap.toKill) {
                        totalSec = (recap.toKill[0][0] - recap.toKill[recap.toKill.length - 1][0]) / 1000;
                        totalDamage = 0;
                        for (j = recap.toKill.length - 1; j >= 0; j--) {
                            totalDamage += recap.toKill[j][2];
                            data.x.push(recap.toKill[j][0] / 1000);
                            data.y.push(recap.toKill[j][2]);
                            data.text.push(recap.toKill[j][3] + ' - ' + findSkill(recap.toKill[j][4], recap.toKill[j][1]).name);
                            data.marker.color.push(recap.toDown ? 'rgb(255,0,0,1)' : 'rgb(0,255,0,1)');
                        }
                        res.totalSeconds.kill[i] = totalSec;
                        res.totalDamage.kill[i] = totalDamage;
                    }
                    res.data.push(data);
                }
                res.layout = {
                    title: 'Damage Taken',
                    font: {
                        color: '#ffffff'
                    },
                    width: 1100,
                    paper_bgcolor: 'rgba(0,0,0,0)',
                    plot_bgcolor: 'rgba(0,0,0,0)',
                    showlegend: false,
                    bargap: 0.05,
                    yaxis: {
                        title: 'Damage'
                    },
                    xaxis: {
                        title: 'Time(seconds)',
                        type: 'category'
                    }
                };
                return res;
            },
            phaseRecaps: function () {
                if (!this.recaps) {
                    return null;
                }
                var res = [];
                for (var i = 0; i < this.recaps.length; i++) {
                    var time = this.recaps[i].time / 1000.0;
                    if (this.phase.start <= time && this.phase.end >= time) {
                        res.push(i);
                    }
                }
                return res;
            }
        }
    });
    // tab
    Vue.component('player-tab-component', {
        props: ['playerindex', 'tabmode',
            'phaseindex', 'activetargets', 'light'
        ],
        computed: {    
            phases: function() {
                return logData.phases;
            },          
            player: function() {
                return logData.players[this.playerindex];
            }
        },
        data: function () {
            return {
                graphdata: graphData
            };
        },
        template: `<div>    <keep-alive>        <dmgdist-player-component v-if="tabmode === 0" :key="'dist' + playerindex" :playerindex="playerindex"            :phaseindex="phaseindex" :activetargets="activetargets"></dmgdist-player-component>        <dmgtaken-component v-if="tabmode ===1" :key="'taken' + playerindex" :actor="player" :tableid="'dmgtaken-player-'+playerindex"            :phaseindex="phaseindex"></dmgtaken-component>        <player-graph-tab-component v-for="(ph, id) in phases" v-if="tabmode === 2 && id === phaseindex" :key="id"            :playerindex="playerindex" :phaseindex="id" :activetargets="activetargets" :light="light"></player-graph-tab-component>        <simplerotation-component v-if="tabmode === 3" :key="'rot' + playerindex" :playerindex="playerindex" :phaseindex="phaseindex"></simplerotation-component>        <food-component v-if="tabmode === 4" :key="'cons' + playerindex" :playerindex="playerindex" :phaseindex="phaseindex"></food-component>        <deathrecap-component v-if="tabmode === 5" :key="'recap' + playerindex" :playerindex="playerindex" :phaseindex="phaseindex"></deathrecap-component>    </keep-alive></div>`,
    });
    // stats
    Vue.component("player-stats-component", {
        props: ["phaseindex", 'activetargets', 'activeplayer', 'light'],
        template: `<div>            <h3 v-for="player in players" :key="player.id" v-if="!player.isConjure" v-show="player.id === activeplayer" class="text-center mt-2"><img :alt="player.profession" class="icon" :src="player.icon">{{player.name}}</h3>        <ul class="nav nav-tabs" v-show="activeplayer > -1">            <li>                <a class="nav-link" :class="{active: tabmode === 0}" @click="tabmode = 0">                    Damage                    Distribution                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 1}" @click="tabmode = 1">                    Damage                    Taken                </a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 2}" @click="tabmode = 2">Graph</a>            </li>            <li>                <a class="nav-link" :class="{active: tabmode === 3}" @click="tabmode = 3">                    Simple                    Rotation                </a>            </li><li>                <a class="nav-link" :class="{active: tabmode === 4}" @click="tabmode = 4">                    Consumables                </a>            </li>            <li>                <a class="nav-link" v-show="hasDeaths" :class="{active: tabmode === 5}" @click="tabmode = 5">                    Death                    Recap                </a>            </li>        </ul>    <keep-alive>        <player-tab-component v-for="player in players" :key="player.id" v-if="player.id === activeplayer && !player.isConjure"            :playerindex="player.id" :tabmode="tabmode"            :phaseindex="phaseindex" :activetargets="activetargets" :light="light"></player-tab-component>    </keep-alive>    <div v-if="activeplayer === -1">        <h3 class="text-center">No player selected</h3>    </div></div>`,
        data: function () {
            return {
                tabmode: 0
            };
        },
        computed: {
            players: function() {
                return logData.players;
            },
            hasDeaths: function() {
                for (var i = 0; i < this.players.length; i++) {
                    if (!!this.players[i].details.deathRecap) {
                        return true;
                    }
                }
                return false;
            }
        }
    });
};/*jshint esversion: 6 */
var apiRenderServiceOkay = true;

var mainLoad = function () {
    // make some additional variables reactive
    var i;
    var simpleLogData = {
        phases: [],
        players: [],
        targets: []
    };
    for (i = 0; i < logData.phases.length; i++) {
        var phase = logData.phases[i];
        var times = [];
        var dur = phase.end - phase.start;
        var floorDur = Math.floor(dur);
        phase.needsLastPoint = dur > floorDur + 1e-3;
        for (var j = 0; j <= floorDur; j++) {
            times.push(j);
        }
        if (phase.needsLastPoint) {
            times.push(phase.end - phase.start);
        }
        phase.times = times;
        simpleLogData.phases.push({
            active: i === 0,
            focus: -1
        });
    }
    for (i = 0; i < logData.targets.length; i++) {
        simpleLogData.targets.push({
            active: true
        });
        logData.targets[i].id = i;
        logData.targets[i].dpsGraphCache = new Map();
    }
    for (i = 0; i < logData.players.length; i++) {
        simpleLogData.players.push({
            active: false
        });
        var playerData = logData.players[i];
        playerData.dpsGraphCache = new Map();
        playerData.icon = urls[playerData.profession];
        playerData.id = i;
    }

    var layout = compileLayout();
    compileCommons();
    compileHeader();
    compileGeneralStats();
    compileDamageModifiers();
    compileBuffStats();
    compileMechanics();
    compileGraphs();
    compilePlayerTab();
    compileTargetTab();
    if (logData.crData) {
        compileCombatReplay();
        compileCombatReplayUI();
    }
    new Vue({
        el: "#content",
        data: {
            logdata: simpleLogData,
            layout: layout,
            wvw: !!logData.wvw,
            datatypes: DataTypes,
            light: typeof (window.theme) !== "undefined" ? (window.theme === 'yeti') : logData.lightTheme,
            mode: 0,
            cr: !!logData.crData
        },
        methods: {
            switchTheme: function (state) {
                if (state === this.light) {
                    return;
                }
                var style = this.light ? 'yeti' : 'slate';
                this.light = state;
                var newStyle = this.light ? 'yeti' : 'slate';
                document.body.classList.remove("theme-" + style);
                document.body.classList.add("theme-" + newStyle);
                if (storeTheme) storeTheme(newStyle);
                var theme = document.getElementById('theme');
                theme.href = themes[newStyle];
            }
        },
        computed: {
            activePhase: function () {
                var phases = this.logdata.phases;
                for (var i = 0; i < phases.length; i++) {
                    if (phases[i].active) {
                        return i;
                    }
                }
            },
            dataType: function () {
                var cur = this.layout.tabs;
                while (cur !== null) {
                    for (var i = 0; i < cur.length; i++) {
                        var tab = cur[i];
                        if (tab.active) {
                            if (tab.layout === null) {
                                return tab.dataType;
                            } else {
                                cur = tab.layout.tabs;
                                break;
                            }
                        }
                    }
                }
                return -1;
            },
            activePlayer: function () {
                var players = this.logdata.players;
                for (var i = 0; i < players.length; i++) {
                    if (players[i].active) {
                        return i;
                    }
                }
                return -1;
            },
            activePhaseTargets: function () {
                var res = [];
                var activePhase = logData.phases[this.activePhase];
                for (var i = 0; i < activePhase.targets.length; i++) {
                    var target = this.logdata.targets[activePhase.targets[i]];
                    if (target.active) {
                        res.push(i);
                    }
                }
                return res;
            }
        },
        mounted() {
            var element = document.getElementById("loading");
            element.parentNode.removeChild(element);
        }
    });
    $("body").tooltip({
        selector: "[data-original-title]",
        html: true
    });
};

window.onload = function () {
    // trick from
    var img = document.createElement("img");
    img.style.display = "none";
    document.body.appendChild(img);
    img.onload = function () {
        mainLoad();
        document.body.removeChild(img);
    };
    img.onerror = function () {
        apiRenderServiceOkay = false;
        console.warn("Warning: GW2 Render service unavailable, switching to darthmaim-cdn");
        console.warn("More info at https://dev.gw2treasures.com/services/icons");
        mainLoad();
        document.body.removeChild(img);
    };
    img.src = "/cache/https_render.guildwars2.com_file_2FA9DF9D6BC17839BBEA14723F1C53D645DDB5E1_102852.png";
}

</script>
<title>Standard Kitty Golem</title></head>
<body>
<script>
        $('body').addClass('theme-' + window.theme);
    </script>
<div class="d-flex justify-content-center align-item-center mt-2" id="loading">
<div class="card" style="width: 75%;">
<div class="card-body" style="margin: 100px; text-align: center;">
Loading data...
</div>
</div>
</div>
<div v-cloak id="content">
<div class="d-flex flex-row justify-content-center align-items-center mt-2" :class="{'ei-header': !mode, 'ei-header-big': mode}">
<div class="card fight-summary" id="encounter" style="min-width: 350px;">
<encounter-component></encounter-component>
</div>
<div class="d-flex flex-column justify-content-center align-items-center ml-5">
<div class="d-flex flex-row justify-content-center align-items-center mt-3 mb-3">
<ul class="nav nav-pills" style="pointer-events:auto;">
<li class="nav-item">
<a class="nav-link" @click="switchTheme(true)" :class="{active: light}">Light Theme</a>
</li>
<li class="nav-item">
<a class="nav-link" @click="switchTheme(false)" :class="{active: !light }">Dark Theme</a>
</li>
</ul>
</div>
<div v-if="cr" class="d-flex flex-row justify-content-center align-items-center">
<ul class="nav nav-pills">
<li class="nav-item mb-1">
<a class="nav-link" @click="mode = 0" :class="{active: mode === 0}">Statistics</a>
</li>
<li class="nav-item">
<a class="nav-link" @click="mode = 1" :class="{active: mode === 1 }">Combat Replay</a>
</li>
</ul>
</div>
</div>
</div>
<div class="ei-container">
<div id="stats" v-show="mode === 0">
<div class="d-flex flex-row justify-content-center mt-2" id="phase-nav">
<phase-component :phases="logdata.phases"></phase-component>
</div>
<div class="d-flex flex-row justify-content-center mb-3 mt-3" id="actors">
<div v-if="!wvw" v-show="dataType !== datatypes.targetTab" :class="{'d-flex':dataType !== datatypes.targetTab}" id="targets" class="flex-row justify-content-center align-items-center flex-wrap mr-5">
<target-component :targets="logdata.targets" :phaseindex="activePhase"></target-component>
</div>
<div id="players" class="ml-5">
<player-component :players="logdata.players" :playerindex="activePlayer"></player-component>
</div>
</div>
<general-layout-component :layout="layout" :phaseindex="activePhase">
</general-layout-component>
<keep-alive>
<damage-stats-component v-if="dataType === datatypes.damageTable" :key="'damage'" :phaseindex="activePhase" :playerindex="activePlayer" :activetargets="activePhaseTargets"></damage-stats-component>
<gameplay-stats-component v-if="dataType === datatypes.gameplayTable" :key="'gameplay'" :phaseindex="activePhase" :playerindex="activePlayer" :activetargets="activePhaseTargets"></gameplay-stats-component>
<dmgmodifier-stats-component v-if="dataType === datatypes.dmgModifiersTable" :key="'modifier'" :phaseindex="activePhase" :playerindex="activePlayer" :activetargets="activePhaseTargets"></dmgmodifier-stats-component>
<support-stats-component v-if="dataType === datatypes.supTable" :key="'support'" :phaseindex="activePhase" :playerindex="activePlayer"></support-stats-component>
<defense-stats-component v-if="dataType === datatypes.defTable" :key="'defense'" :phaseindex="activePhase" :playerindex="activePlayer"></defense-stats-component>
<graph-stats-component v-if="dataType === datatypes.dpsGraph" :key="'graph'" :activetargets="activePhaseTargets" :phaseindex="activePhase" :playerindex="activePlayer" :light="light"></graph-stats-component>
<buff-stats-component v-if="dataType <= datatypes.defensiveBuffTable && dataType>= datatypes.boonTable" :key="'buffs'" :datatypes="datatypes" :datatype="dataType" :phaseindex="activePhase" :playerindex="activePlayer"></buff-stats-component>
<personal-buff-table-component v-if="dataType === datatypes.personalBuffTable" :key="'persbuffs'" :phaseindex="activePhase" :persbuffs="logdata.persBuffs" :playerindex="activePlayer"></personal-buff-table-component>
<mechanics-stats-component v-if="dataType === datatypes.mechanicTable" :key="'mechanics'" :phaseindex="activePhase" :playerindex="activePlayer"></mechanics-stats-component>
<target-stats-component v-if="dataType === datatypes.targetTab" :key="'targets'" :playerindex="activePlayer" :simplephase="logdata.phases[activePhase]" :phaseindex="activePhase" :light="light"></target-stats-component>
<player-stats-component v-if="dataType === datatypes.playerTab" :key="'players'" :activeplayer="activePlayer" :phaseindex="activePhase" :activetargets="activePhaseTargets" :light="light"></player-stats-component>
</keep-alive>
</div>
</div>
<div id="combat-replay" v-if="cr" v-show="mode === 1" class="ei-container-big">
<combat-replay-ui-component :mode="mode" :light="light"></combat-replay-ui-component>
</div>
<div class="footer" :class="{'ei-header': !mode, 'ei-header-big': mode}">
<div>Time Start: 2019-07-26 22:34:40 -04 | Time End: 2019-07-26 22:36:23 -04</div>
<div>ARC: EVTC20190529 | Fight ID: 16199 | EI Version: 2.15.1.0</div>
<div class="mb-2">File recorded by: My Blasts R Awesome</div>
Generated with <a href="https://github.com/baaron4/GW2-Elite-Insights-Parser">Elite Insights</a>.<br /><a href="https://dps.report/">dps.report</a></div></div></body>
</html>